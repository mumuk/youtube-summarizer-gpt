{
  "totalTokens": 40767,
  "transcript": "Всем привет Сегодня будет МОК собеседование по фронтенду как только я щёлкну пальцами мы с моим сегодняшним гостем арсением хромцово превратимся в интервьюера и интервью его рекомендация по просмотру перед тем как я начну отвечать на вопрос Арсения рекомендую поставить на паузу и попробовать ответить на вопрос самому Это даст тебе 100 процентную гарантию что ты действительно готов к собеседованию потому что сегодня мы перечислим все самые популярные вопросы которые вот прямо сейчас за стеной спрашивают на рынке найма в it пытайся на этот вопрос ответить Проверяй себя по нашему ответу Ну а если тебе необходима дополнительная документация и какие-то ссылки где можно почитать и восполнить пробелы в знаниях то Переходи в описание там есть м коды и для каждого тайм кода вопроса добавлена ссылка на официальные источники ну погнали Да Привет Антон Сегодня мы тебя собеседуем на должности сеньор фронтенд разработчика и Давай в первую очередь начнём с резюме А ты писал что ты работаешь в нонейм банке А расскажи пожалуйста как у вас вообще был устроен процесс работы Какие самые крутые задачи ты делал Что вообще было по стеку Давай начну немножко про себя в общем мне 27 лет я закончил Питерский Политех У меня есть диплом бакалавра и магистра Я учился на обеспечении качество программного обеспечения в ame бан Я попал 2 года назад я работаю в команде которая занимается предоставлением услуг и отчётов для юридических лиц Мы работаем над инвестиционными продуктами и документооборотом поначалу проект даже не был раскачай на пользователей Мы работали по методологии кабан но недавно год назад примерно наконец-то зарезали и теперь как-то процессы устаканится стандартно используем JavaScript с typ скриптом react redux для запросов используем axios для формочек используем react hook form C CD у нас организовано просто через gitlab ну и для тестов мы используем jest и для UI тестов playwright Скажи пожалуйста тесты вы начали писать ещё в самом начале проекта или только когда вы его начали переводить на продакшн К сожалению тут мой ответ бьётся на правильный и как Действительно получилось Я большой фанат того что тесты в продукте должны быть с самого начала до того как написана первая строчка кода уже должны быть тест-кейсы прописаны на созвоне с бизнес-аналитиком и проектным менеджером к сожалению у нас это получилось немножечко не так но за год мы от полу хаотичного кабана Когда в любой момент может прилететь задача которую вот надо типа Бросить всё и пилить её перешли всё-таки к скраму И теперь мы работаем Ну по нормальной методологии то есть сначала qa инженеры А про Команду наверное стоило ещё рассказать вообще в нашем ноунейм банке Много народу около дети команд в моей команде три фронта один Лид над фронтами Ну соответственно НР а два ручника Q один автоматизатор Ну и дизайнер продукто оунер и Проектный менеджер коче мы ти автономный который занимается Вот только нашей частью всего приложения Окей было ли такое что прилетали какие-то задачи которые затрагивали несколько команд и вам приходилось как-то взаимодействовать Да конечно иногда есть какие-то интеграции которые должны торчать наружу иногда наш попп открывается из другого места поэтому конечно такой взаимодействие предполагает Ну митинги между командами мы согласуем контракты Ну в целом Ува Окей Расскажи ВМ как шла работа задачей как она появлялась и как она попадала в продакшене Да конечно ну тут как бы у нас см и Flow Давай как-то просто среднестатистический спринт я расскажу начинается в общем спринт И в этот момент у нас происходит Груминг задачи в спринт достаются из бэклога в этот бэклог они попадают на квартальном планировании потом Проектный менеджер там утр сает все детали аналитиком а тестировщики разбирают это на написание тест-кейсов мы что-то читаем что-то переспрашивает уже с каким-то списком оформленных целиком задач чтобы не спрашивать типа А что здесь надо сделать ничего не понятно Вот на Груминг оцениваем Если слишком много мы используем рипо Если слишком много то разбиваем декомпозировать поэтому Значит надо её разбивать и получать какие-то вменяемые оценки Всё дальше Лид раскидывает асат задачи мы приступаем к их разработке Как происходит конкретно одна атомарная задача с точки зрения разработчика а ркд дев ветки фичи ветки в ней идёт разработка когда разработка подходит к логично итогу кажется всё готова и минимально протестирована самим разработчиком создаётся Pull request в де в этот момент C CD отправляет э сборочка тестировщику на Сати тестирование То есть он проверяет что это фича в порядке Мы МР Можем всё это дело в develop Ну и так разработчики решаем конфликты там происходит процесс Quad review Ну думаю что Про это можно не рассказывать в компании слава Богу уже есть linter Style Guide то есть мало ругаемся на код Review А в основном всё уже автоматизировано что можно то есть то есть из-за скобочек умеем не спорить вот Ну так происходит работа у всех в какой-то момент некоторые спринты Мы просто не релиз только на стейджинг накатывает Так что мы срезаем на стейдж это отправляется на регресс для тестировщиков А вот в эту ветку сй мы больше ничего не льём Если тестировщики говорят что что-то не так есть дефекты прямо в стейджинг это также через Фиксы Фикси потом происходит Back merch в develop Когда мы выкатили это ну всякие крутые практики нормального релиза У нас тоже есть то есть у нас есть Альфа версии У нас есть фича Оглы У нас есть paral rollout когда мы раскатываем там только на часть пользователей нашу сборочка Вот и смотрим что они ответят какие у нас ещё есть артефакты скрама у нас дейлики Мы стараемся сводить их минимально к Привет Какие есть проблемы Успею ли закончить всё обычно 20 минут с головой хватает на команду У нас есть ретроспектива как раз-таки вот в первый год было очень много баталий по поводу Канбан и его преобразования в скрам наконец-то мы всё это сделали чему Я признаться рад сейчас в основном ну ретроспектива короче спокойно проходит Не суть Да вроде всё что когда у вас проходит квартальное планирование вы также в стори поинтах оцениваете или какими-то более ещё абстрактными вещами потому что как будто бы там ценить нереально ещё задачу ну на квартальном планировании Мы в основном мыслим категориями эпиков потому что обсуждать там куда мы подвинется цвета конечно же чересчур то есть в эк создаются Эпики они приоритизировать в этом спринте в этот момент Эпик наполняется User Stories так как Эпики трудно оценивать в ри поинтах и очевидно они все больше там 15 больше 100 ри поинтов на Epic скидывается примерное количество дней ну как бы это иногда там происходит с пнг покером Иногда просто Ну наверное это там месяца два займёт Ну наверное да когда мы понимаем что приоритет этого Эпика подошёл и вот сейчас в следующем спринте кажется пора будет им заниматься Epic плотно наполняется расписываются User Stories и декомпозировать и вот их мы уже оцениваем в стори поинтах чтобы ну по графике по аналитике жиры понимать что вот этот спринт мы укомплектовали и он запускается Окей окей тут вообще вопросов нету Расскажи тогда о самых крутых задачах которые ты вообще делал на работе за последнее время самая крутая и масштабная задача связана с событиями из-за которых сап компания покинула территорию Российской Федерации и как бы мы использовали под капотом В общем его наш банк но так как теперь это продукт санкционный его использовать нельзя нам пришлось админку перепилить с нуля там масса различных фичей Если надо я конечно про них конкретно расскажу но давай сосредоточимся именно на моих достижений в общем самая масштабная задача была табличка ну не не просто табличка О&amp;#39;кей а то есть идея в том что пользователь может загружать разнообразные данные в разнообразном формате там может быть разное количество полей и ну как бы вот мы закидываем это и табличка должна преобразоваться и подстроиться под эти данные что я имею в виду например А в таблице есть имя фамилия возраст тогда у нас в таблице появляются эти поля и мы можем фильтровать по ним и делать какие-то простейшие сортировочные действия ну к примеру мы можем отфильтровать возраст от и до надеюсь тебе нравится глубина и полнота ответов на вопросы спешу обрадовать на самом деле эта часть видео которое выложено на YouTube неполное в полной режиссёрского версии Мы рассмотрели ещё больше технических архитектурных и софтов вопросов и снабдили их подробной тестовой расшифровкой с полными ответами пруфами и ссылками на дополнительные материалы она доступна после подписки на сообщество осознанной меркантильность для всех участников переходи по ссылке в описании после подписки тебе станет доступно Не только это интервью но и многие другие даже записи реальных собеседований в русские и не только бигтех Ну и конечно профильные технические чаты Где тебе помогут с подготовкой поделятся вопросами в конкретную команду короче за подписку ты получишь доступ к целой экосистеме для подготовки к собеседования переходи по ссылке в описании подписывайся на бусте и смотри полное видео со всеми вопросами и подробными ответами ну а мы продолжаем хорошо про основной функци фона в целом Понятно Расскажи в чём ещё Техническая сложность была потому что как будто таблица выводится Поля не так как будто рдо так Мы работаем С банковскими данными у них может быть неизвестный большой объём То есть это может быть во-первых много столбцов это может быть много строк то есть кидают там гигабайт най экселевский Файлик и было бы неплохо чтобы он распарсить всю оперативку скролл не будет работать поэтому стояла задача виртуализации таблицы то есть мы рендере ту часть которая тся во вьюпорте пользователя логичный вопрос А что бы просто не взять какую-нибудь библиотеку которая уже всё это порешал за нас Ну к сожалению это всё-таки банковская сфера и устанавливать случайные пакеты не получается Поэтому у нас только самые основные библиотеки используются А вот такие прикладные вещи мы пишем руками Поэтому вот я реализовывался через нативный CSS ну все элементы имеют одинаковую высоту я относительно скролла высчитывали стартовый индекс и финальный индекс элемента рендерит только эту часть в CSS изменяя свойства translate Y так как В тупую менять топ К сожалению бы не получилось потому что ну там есть особенность что топ заставляет рендерится страницу вычисление происходит на CPU А ну это было бы черезчур много Угу О&amp;#39;кей про это чуть попозже поговорим хорошо Ты упомянул бесконечный скролл А для чего он был нужен Ну идея в том что мы листаем - таблицу и мы не хотим нажимать на кнопку lad More или там перелистнуть на Следующую страницу хотя это могло бы решить проблемы Но как бы это хуже бы работало с фильтрации да и просто с наглядностью бесконечный скролл Ну подгружает чуть-чуть заранее чтобы пользователь не видел нас наш индикатор ler чтобы ну он видел сразу таблицу до конца Хорошо ты сказал что в этой странице ещё были фильтры по возрасту по имейлу если я быстро буду их изменять то таблица наверное тоже будет перескакивать очень быстро нет здесь использовал концепцию debounce Ну идея в том что у нас есть много событий и мы не на каждое событие в тупую отправляем запрос а мы ждём пока На некотором интервале э события как бы закончится и Ну например Я очень быстро печатаю И это не значит что я отправляю на каждый запрос на каждую введён ную букву запрос на энд Я жду пока пользователь допечатная лишнее о&amp;#39;кей О&amp;#39;кей круто ещё с этой фич связано что Ну я рассказал Вот про способы поставки туда данных на самом деле их нужно было поддерживать несколько То есть например можно для создания такого отчёта просто указать ссылку на backend endp с необходимыми фильтрами и создать отчёт из неё второй формат мы просто выбираем BD который у нас крутится прописываем SQL запрос и табличка сама достаёт всё нужное из этой БД по этому иль запросу и третье это как раз разбор больших файлов типа гигабайт 2 гиб и подгрузка информации из них здесь сложность состояла в том что естественно браузер по умолчанию не переварит гигабайт файл Вот это так не работает поэтому Был использован таз для подгрузки файла по частям Ну я не знаю в Ну короче когда мы запихивает интернет чтобы мы заново всё не грузили чтобы у нас сохранялось состояние загрузки и продолжалось с того же самого места вот может наверное показаться что Да блин ну подумаешь таз и таз но здесь ещё была проблема во взаимодействии Вот ты в начале меня спросил взаимодействует ли с другими командами вот этот модуль как раз был пошарил между командами То есть он был вынесен там в отдельный наш внутренний репозиторий чтобы он мог переиспользовать и там да там пришлось много взаимодействовать согласовывать А какие форматы мы поддерживаем где мы ошибку возвращаем потому что хотелось сделать а именно Ну переиспользование решение между командами которые бы все себе могли подтягивать а не каждый бы пилил свои велосипеды и каждый бы тратил время там на их починку отладку и вот это всё надеюсь вам нравится наше собеседование Кстати я ментор по фронтенду и именно я готовил Антона к нашему собеседованию Если у вас есть сложности с прохождением собеседований Возможно вы не знаете что именно нужно к ним изучать не умеете решать задачи СТС или просто не можете себя преподнести на собеседовании то переходите по ссылке в описании и забирайте полный список ответов на вопросы из этого видео ты упоминал тесты на бке в целом там Понятно нит тест писали на какие-то агрегирующие функции расскажи какие тесты вы вообще писали на фронте в основном Юнит тесты все ушли на bff там мы ими покрывали чистые функции какой-то мэппинг данных из микросервисов функции для маппинга валют времени преобразования дат Ну короче Вот для этого всего на фронте мы писали Юнит тесты под простые компоненты под чекбокс под ради Group Ну и на хуки фронтовые Окей и у нас были интеграционные тесты Ну по пирамиде тестирования Юнит больше интеграционных меньше и на самые критические какие-то места То есть то что точно должно работать и то что тестировщики каждый раз проверяют также писали UI тесты тут Наверное могу похвастаться что моей инициативой было затащить в проект Ну вот я рассказывал про таблицу пример там тест-кейсов понятно что мы обрабатывали разные но вот юный тест что ну загружаем какой-нибудь простенький Файлик там на 20 записей он показывается мы проверяем что он показывает там ровно то количество элементов которые влезают в экран они все он их рендерит Да и пользователь вводит какой-то там запрос по имени и мы проверяем что после того как он ввёл запрос отфильтровали и видно только записи Ну вот такого формата теста потому что каждый раз это вручную протыкать довольно уныло а так мы как бы закрыли целое критическое фу Окей А эта проверка она была только локально у вас или она где-то на C тоже крутилась на C то есть по тфу когда мы Ну как бы смотри юай нае тесты каждый раз мы не гоняли потому что это Долгова их всё-таки Ну я про один рассказал их там несколько сотен и всё-таки там где-то задержка где-то подольше Так что UI тесты гонялись когда был г а на обычной мержи в develop фичи веток гонялись просто Юнит тесты Ну и там линтер и sonor Cube Угу О&amp;#39;кей Круто А этот отчёт сор кба вы как-то просматривали Или он просто в консоль вам показывал если Ну как бы там же можно настроить что если просто предупреждение то как бы неплохо бы починить но в целом зелёненькая галочка если критические повреждения которые мы не любим и осуждаем то а высвечивается блок на МР разработчик идёт и фиксит ну soner Cube конечно не идеален иногда его кот смелс это в общем не кот смелс а нормальная какая-то тема но там ну если ты работал Ты знаешь что там можно пометить Что это Это не это не проблема И как бы смрт Но в основном Мы конечно читали эти отчёты и они пости в gitlab и мы старались смотреть что там происходит Ну там был виджет кба Окей круто Я чувствую что ты довольно такой сильный чувак уже насколько ты сейчас оцениваешь денег на какой грейд я отношусь к этому вопросу так мне кажется что деление грейдов Это довольно условно Ну то есть например там в Google Я могу быть медлон в Сбербанке я могу быть сеньором ещё в каком-то месте там не знаю к Илону маску я приду он скажет что я жуниор поэтому давай так я решаю задачи сеньор ского уровня с высоким уровнем ответственности То есть я не ности я забираю требования Я предлагаю решения Я подсвечивают когда я решение предоставляю мне не нужно переспрашивать там А ты это проверил А это ты учёл потому что я как бы целиком отвечаю на задачу ну и в целом мне можно дать без преувеличение салфетку и я эту салфетку превращу вот в Готовое решение например таблицу поэтому я себя оцениваю по рынку на 450.000 руб это минимальная планка не Комфорт а минимальная потому что я уже собесед с несколько компаний параллельно У меня есть несколько процессов интервью там на середине на конце и есть несколько офферов Окей Ну цифры которые ты озвучил более чем в нашей вилке Поэтому думаю если ты дойдёшь до оффера мы тебе его сможем выдвинуть Слушай вот ты рассказал очень много всего и задачи у тебя были вроде крутые и процессы Вы прямо налаживать когда ты работал А почему-то собственно сейчас ищешь Новое место я пришёл к выводу что я наверное какой-то вот Мне нравится когда вокруг буря страсть и эмоции то есть мне нравится налаживать и насаждать хорошие практики Несмотря на то что я как-то возможно через чур снисходительно говорил про Канбан Ну возможно потому что это был не Канбан а просто типа сваливаем всё в кучу а вось что-нибудь получится вот И теперь когда я получил вот этот вот богатый опыт напилили таблицу мы сделали UI тесты Короче когда условно каждая область рисков была заткну на ней был придуман или найден какой-то вот какое-то решение которое позволяет не бегать с горящей задниц и в пятницу вечером простите мой французский в этот момент всё устаканится системой стиля или дизайн системой может быть над какой-то вот архитектурой между команд короче вот вот хочется развития не могу То есть это я не имею в виду что я не могу делать однотипные задачи я к этому с полным пониманием отношусь это всё хорошо но всё-таки когда это 100% разработки это меня немного утомляет Ну к сожалению сейчас проект перешёл скорее в статью поддержки когда надо неторопливо разбирать баги там Очень редкие у пользователей В смысле трудно воспроизводимые и новых фичей практически нет Потому что по сути всё работает вот и ну проект вошёл в стадию когда Давайте там это перепишем Давайте здесь отре Фактори Давайте напишем ещё несколько там тестов Ну видно что грубо говоря заглохла продуктовая сторона немножечко и меня это печалит плюс естественно я сильно вырос Я получил много опыта Я хочу его применять Я хочу быть полезным Я не хочу пилить задачи в стол я я как бы считаю что рефакторинг - это круто но когда там он полгода идёт и просто переписывается ради переписывания но мне немножечко надоедает Надеюсь в вашей компании такие фичи будут я вас не обидел Но вот тимлид мне сказал что я твой запрос понимаю но к сожалению никак помочь пока что не могу Окей я услышал что ты не только я так понимаю хочешь делать что-то продуктовое не только в коде копаться но и расти как-то по вертикали что ты в целом ищешь сейчас от новой компании в лом я большой фанат поговорки что если ты самый умный в комнате то ты не в той комнате поэтому я ищу безусловно равных и более крутых коллег я при этом готов наставлять новичков и помогать кому-то но я также хочу и получать новые знания Мне не хочется чтобы мозг закисала и я просто по одному и тому же паттерну раз за разом решал одну и ту же задачу Вот то есть я могу это делать но без развития Мне становится тяжеловато вот в я рассматриваю рост и до стаф инженера либо до Лида Мне очень нравится заниматься Вот такими нетривиальным задачами и фиксить боли компании я действительно умею общаться с бизнесом объяснять Ну вот я сказал что мы сделали UI тесты не каждый бизнес понимает что это такое зачем они нужны я могу донести что вот типа мы сейчас сэкономим там по 3 часа на каждом регресс тестировании вот ну не суть Короче я умею общаться Я умею выставлять требования Я умею вот затягивать такие гайки там фиксить проблемы и мне кажется у меня это неплохо получается Поэтому в теории Я бы хотел попробовать более высокие уровни более масштабные задачи брать Что тебе не нравится делать на текущем месте я безусловно сделаю любую задачу потому что я понимаю что интерес бизнеса - это одно а интерес разработчика - это другое но всё-таки э скажем так с меньшим уважением я отношусь к однотипным задачам в сотый раз сверстать кноп Артик написать ещё один преобразователь Дат Из строки в дату потому что ну скажем так даже не смотря на моё неуважение каждую такую задачу я буду оно играет мне в Плюс потому что каждую такую задачу я буду думать как автоматизировать и как свести монотонный boiler plate код к одному Ну вот в частности чтобы не быть голословным в нашем текущем ноунейм банке Я предлагал добавить дизайн систему потому что уморительно грустно смотреть иногда как два разработчика из двух разных команд пилят одно и то же окошко или один и тот же попп там дропдаун фиксят одни и те же баги два разных тестировщика это тестят и репорт Хотя это можно было бы слить в компонент и переиспользовать между командами Поэтому в целом не могу сказать что я боюсь однотипных задач я наоборот стараюсь их автоматизировать чтобы было лучше не только разработчикам но Бине проы ме Ну пример с реально классный у нас такая же проблема была и у нас сейчас тоже свой есть который мы поддерживаем Ты сейчас позиционируешь на собеседование как человек который достаточно инициативный вот возможно у тебя были конфликты либо по этим инициативам Либо когда кто-то из разработчиков из сотрудников из коллег Приходил с какими-то предложениями Раскажи об этом Ну я бы не сказал что это прям конфликт конфликт Это в баре А у нас была просто ну такая сложная дискуссия то есть завтра релиз вот всё уже как бы готово Тут приходит тестировщик с регресса и говорит Слушай вот тут у нас баг Ну приходит образно говоря он создаёт тикет вешает его на меня говорит ну как бы срочно чинить там гает в чате говорит ребят Посмотрите я Начинаю разбираться и понимаю что это баг в каком-то очень ну грубо говоря отдалённом глухом месте проекта и более того это часть не менялась Ну типа уже там месяца три наверное то есть этот бак он там как был 3 месяца и Вот первый раз его нашли Ну так как релиз и демо перед заказчиком завтра Это довольно важно я отвечаю в тикитекс производится но наверное Давайте мы его починим в следующем спринте потому что он к текущему релиз кандидату отношения в целом Не имеет это не срочно на Дема этого не будет Поэтому ну как бы следующий спринт на что тестировщик ну как будто бы испытал такой праведный Гнев его можно тоже понять его продукт он гарантирует качество но в общем он тегнул в слаке Ну короче там команду что вот Ребята почему вы отказываетесь чинить бак типа это супер важно давайте мы это починим там до завтра Ну и как-то вот он лично подол и что вот Ну и что ты отказываешься чинить Ну я же показал вот ну это порешал обменявшись с ним аргументами объяснив всё то что я проговаривание эффекта Я подошёл к Тим леду и просто сказал ну как бы нам нужен третейский судья пожалуйста рассуди вот реши Как сделать я подчиню с обоим вариантам Ну в итоге как бы выбор судьи Пал на мою сторону мы действительно перенесли эту задачу на следующий спринт Я сказал что вот я починю сам потом чтобы это не держал на меня какой-то там обиды его нгану сказал что я вот починил вот как бы смотри всё всё окей В итоге демо прошло нормально бак Мы в следующем спринте починили насколько я знаю аут комом из этой ситуации был просто что мы чаще начали делать полный регресс потому что конкретно этот баг был найден ну как-то супер случайно то есть короче там тест-кейсы не прогоняли а в этот раз Человек решил зайти куда-то в сторону мне подсказали термин из qa тестирования есть такая штука как парадокс пестицидов это когда раз за разом тестируют одно и то же флоус а вот здесь вот сбоку по краям уже как бы ничего не работает Ну можем там углубиться в ные термины потом короче они внедрили у себя так называемое хок тестирование это когда мы не по заранее известным тест-кейса проверяем приложение А когда мы просто рандомно нажимаем кнопки стараясь найти хоть какие-то проблемы Ну и таких парочку вот старых багов Мы отловили в общем появилась такая вот у них новая забава там раз в месяц просто рандомно всем отделам нажимать на случайные кнопки Окей интересное различение УК А если такая ситуация опять бы повторилась Понятное дело что Ну все баги нереально найти и пришёл бы в этот раз не баг А какой-нибудь идея от менеджера А тут у вас уже релиз на носу и Ну не времени Что вы сделали чтобы такого больше не повторилось Ну идея от менеджеров это вообще было стандартно вот когда у нас был как раз Канбан Ну как будто бы когда в компании принимается скрам и хорошо Всем известны практики то когда эта практика вопиющее нарушается Ну типа в середину спринта в корячится задача Хотя уже там подсчитан капасити подсчитан дай всё Рассчитано и пук-пук ну Сделайте пожалуйста что вам сложно обычно все на это смотрят с не одобрением и ну такого просто не происходит но давай мы предположим что что-то с нашим менеджером случилось нехорошее Он растерял все свои компетенции и действительно решил так сделать Ну это точно разговор то есть надо выяснить насколько это действительно срочно что это не какое-то личная преференция человека что это действительно ждут бизнес на языке финансов может объяснить почему Ну дальше Что дальше это либо оплачиваемые переработки какие-то ночные кранчи хоть и не любим Но как бы иногда надо Понятно либо это разгрузка текущего спринта выкидывание из него каких-то других задач если время их выкинуть ещё есть там ставим их на Фриз делаем эту всем отделам Ну другого варианта не надо я бы конечно там попытался разобраться привести аргументы что Так не делается но если надо порешаем стоит сказать что у нас был потом разбор этой ситуации потому что всё-таки в ней Ну сообщения в общем чате все видели Вот и короче мы просто написа Дони к нашему там скраму что вот если такая ситуация случается ни в коем случае Ни в коем случае мы не добавляем задачу вот в спринт но я говорю вообще в общем что там если в вашей компании такого правила ещё нет ну по-моему это решается как бы только либо убираем задачи либо Просим кого-то помочь либо перерабатываем в ночь и как-то рели кстати в свом канале по ссылке в описании выложил слив одного из собеседований В крупный российский бигтех Посмотри если хочешь понять как вообще выглядит вот реальное собеседование может быть оно отличается не доверяй мне Проверь меня ссылка в описании ну а мы продолжаем ты упомянул про тех долг А расскажи в целом для чего он нужен и что вы с ним делали сами он скорее не нужен вот но тех долг - это вынужденное оставление кода там в не идеальном на наш текущий взгляд состояни Ну вот я упомянул давай там что можно не написать тесты не написать UI тесты можно как бы не пофиксить комментарии на пол реквест можно не спроектировать хорошие абстракции а просто написать Вот функцию которая идёт там по основному пути не проверить краевые значения потому что вот завтра на Дема наш докладчик введёт там именно Антон Назаров он не введёт там Назар Антонов и поэтому функция отработает ну и скрою такое иногда бывает тех долг - это когда мы вот как бы описываем что конкретно мы накосячили мы создаём тикет мы говорим что мы это починим Если вдруг это будет когда-то не скоро Мы объясняем Какого хрена мы так поступили Ну и в общем даём все инструкции чтобы когда-нибудь для кого-то это не было новостью хорошей практика считается что обычно там хотя бы раз в квартал есть спринт на тех долг когда мы не пилим новые фичи мы правим правила нра а вот кстати хороший тех долг Ну иногда Там просто берётся целый файл в начале пишется lint ignore и типа ну Пофиг потом починим вот такое убираем из проекта вот да Обычно спринт най разбор тих долго Ну в целом Я считаю что любой проект живёт с тех долгом он постоянно Копится Главное вот балансировать то есть решать весь тех долг нельзя потому что иначе бизнес скорее всего будет недоволен не решать тех долг вообще нельзя тоже потому что в какой-то момент это накопится как Снежный ком и вы в этом просто утонет Угу А в какой момент вы начали уже работать с их долгом до выхода проекта на продакшн или уже после после потому что естественно у нас был главный приоритет релизинг Ты создаёшь задачку на тех долг естественно она проваливается куда-то вниз и никогда оттуда не достаётся а в скраме Ну хотя бы вот мы там наполняем спринт и такие так а не взять ли нам ещё там вот это эту задачку там на три стори поинта переписать там пару функций Дописать один тест вот начали работать после релиз Короче давай тогда перейдём к техничке а давай начнём с мля Для чего нужно абилити атрибуты абилити нужны для того чтобы обеспечить корректную работу взаимодействия с сайтом у людей с ограниченными возможностями Ну то есть это например что-то со зрением Или например человек пользуется только клавиатурой без мышки атрибуты абилити позволяют например задать порядок по которому мы будем переключаться между элементами С помощью кнопки Tab вот позволяет задать цвета если человек например испытывает дальтонизм то мы можем инвертировать цвета чтобы он мог различать их также с помощью ри атрибутов мы задаём значения которые помогают настраивать скрин Reader То есть например человек с ограниченным зрением просто включает скрин ридер и ему говорят в каком состоянии Сейчас элементы например там dropdown раскрыт выбран такой-то пункт выставлен такой-то фильтр Вот для этого нам абилити Угу также семантика HTML Ну то есть в целом-то мы можем все страницы сверстать через div и это даже будет работать но проблема в том что А через скрин Reader пользователю будет озвучены не настоящий элементы например таблица кнопка параграф текст а всё будет слито в одно он просто не сможет пользоваться этим сайтом а таких людей значительный процент и как бы хорошей практикой считается поддерживать полностью абилити в продуктах Угу О&amp;#39;кей если наш сайт будет сделан с помощью дивов это ещё у нас будет влиять на SEO Расскажи в целом как работает SEO оптимизация Что такое роботы поисковые и так далее се оптимизация нужна для того чтобы наш сайт показывался вообще в поисковиках на что в конечном итоге как бы мы и цели Да потому что мы хотим быть первым там по определённым запросам после поискового запроса поисковый движок опираясь на заранее проиндексированную SEO информацию делает выдачу эта индексация происходит на основе тегов специальных слов ссылок которые мы расположили на сайте и в наших интересах сделать её максимально хорошей чтобы сайт поднимался выдаче Угу поисковый движок проходится По ссылкам которые расположены на сайте указывают на другие сайты короче происходит рекурсивный обход То есть он переходит в корень сайта сканирует все ссылки и вот так и происходит индексация по этим ссылкам он переходит смотрит какой там контент смотрит какие там Мета теги и Ну вот как бы Какие Мета в м существуют основные метагид например og title og description на них будут обращать социальные сети при встраивание Тен когда типа мы в Twitter ссылку дропаем условно и там есть превью какая-то помимо основных Ну как у нас базово превью ссылки выглядит это картинка название описания там ещё куча других тегов Например если мы встраиваем какой-то контент со стримингового сервиса музыку то там можно там указать автор альбома название трека год выпуска название группы Ну и так далее Окей А если у нас к примеру marketplace и вручную индексироваться поисковым роботом он будет очень долго Как мы можем ему упростить жизнь есть файл sitemap.xml это своего рода карта сайта А туда мы кладём все ссылки которые у нас есть на сайте и делим их на разделы в твоём случае если у нас marketplace или например там библиотека какая-нибудь Да где ссылок очень много и вручную их писать Ну невозможно по-хорошему мы можем запустить на кэндес прип который пробежит по нашей базе и за нас соберёт этот файл он будет автоматически сгенерирован мы его подкладываем и робот смотрит на этот файл Угу О&amp;#39;кей а Влияет ли скорость загрузки нашего сайта на его индексацию в браузерах Да конечно на SEO влияет скорость загрузки сайта Но это своеобразный фильтр чтобы в топе поисковика вы поднимались только качественные продукты У нас есть способ мониторить это время есть lth есть Google page Speed и по-хорошему Это должно быть как и тесты интегрировано в проект с самого начала то есть я упоминал что у нас например есть сентри там можно смотреть как наш релиз повлиял на скорость загрузки сайта но также важно помнить что время - это вот не одна Метрика как Многие думают У нас есть разные метрики то есть время до загрузки первого элемента время загрузки всех файлов то есть HTML CSS и всех Сорсо джаваскрипт есть время до загрузки самый большой части контента есть количество прыжков страницы то есть сколько раз она перерисовываю сколько раз элементы на ней смещаются во время загрузки и по-хорошему все эти метрики важны Ну если времени нет то мы просто конечно следим за хотя бы временем загрузки сайта целиком Окей Ты упомянул как раз критику CSS это одна из важных частей Фаст рендеринга Расскажи детально как В целом происходит рендеринг страницы какие там есть фазы А я не знаю потому что я не ходил к Арсению на менторство и тут слишком много фаз Арсений Помоги мне пожалуйста Да конечно Антон смотри первая фаза - это у нас построение HTML дерева наш браузер рендерит наш HTML и составляет из этого уже дом дерева после этого идёт фаза составления CSS ом дерево точно так же только с ССМ После этого у нас идёт стадия render 3 это когда мы берём наше HTML дерево CSS дерево и скомпоновать их после этого идёт стадия лейауты которые отвечают за позиционирование элемента это свойство Top Left position плей а на основе этого мы понимаем В каком месте какой элемент будет отображён и у нас по сути готова структура страницы После этого у нас идёт фаза пейнтинг на ней мы берём свойства CSS отвечающие за визуал нашей страницы и раскрашиваем её на этом этапе пользователь ещё ничего не видит важная Ремарка а фаза лейауты и фаза пейнтинг выполняются на процессоре поэтому они являются блокирующим операциями после этого идёт фаза композишн на этой фазе мы формируем наши слои и рисуем нашу страницу а важный момент в том что рисуем только то что отображается у нас во вьюпорте браузер достаточно умный поэтому всю страницу он делит на слои А в этом заключается его основные оптимизации У нас есть основной поток - это рисование HTML рисование сисса и есть дополнительные потоки на которых как раз и рисуются слои это нам может помочь если Мы выполняем какую-то сложную анимацию к примеру передвигаемся нашу анимацию наши операции на другой слой который как раз будет выполняться на видеокарте за счёт этого наш основной поток не будет блокироваться и сайт будет работать оптимизировано вот в этом состоит фаза рендеринга Уважаемые фронтендер вопрос к вам а когда у вас начинается фаза подрыва очка от такой сложности системы Прошу прощения frontend топ идём дальше Окей А расскажи что происходит перед фазами рендеринга когда пользователь просто находится в браузере да да этот знаменитый вопрос что происходит от нажатия клавиши до отрисовки сайта Но я надеюсь что ты меня спрашиваешь не про процессоры оперативную память А всё-таки про маппинг ur в IP адрес в общем у нас есть поисковая строка мы вводим туда URL адрес нашего сайта далее браузер обра тся в локальный кэш и проверяет известен ли уже IP адрес этого сайта Были ли раньше обращения либо же нет в случае если в локальном кэше пусто то также проверяется файл etc Host Где мы можем вручную задать соответствие неких доменов IP адресам далее происходит обращение к ДНС серверу наверное здесь углубляться в то Какие конкретно взаимодействия происходят между НС серверами мы не будем Потому что об этом отдельно собеседование можно проводить ну скажем что DNS сервера существуют разных уровней глобальный региональный А даже у интернет-провайдера может быть свой DNS сервер Ну и Наверное стоит сказать что несколько доменов могут соответствовать одному IP адресу то есть мы можем разные вводить и нам будет всё равно отдаваться один и тот же сайт если используются протокол https то происходит tls рукопожатие с протоколом СС ты сказал про СС сертификат откуда он появляется есть центры выдачи цифровых сертификатов Ну грубо говоря конкретная личность привязывается к конкретному сертификату ну или к нескольким и Поэтому собственно говоря рукопожатия является трёхсторонний то есть это клиент это вот этот вот центр выдачи сертификатов и это сервер на котором лежит наш сайт Окей круто получили сайт получили айпишник далее Обращаемся за ресурсами Обращаемся с помощью какого-то запроса Расскажи что за запрос из чего он состоит Обычно когда мы говорим http или https мы подразумеваем rest и наши приложения работают именно на нём rest - это архитектурный стиль Ну если по глубже покопать то это набор рекомендаций структура того как должны оформляться запрос у этих методов есть свои рекомендации по использованию есть свои свойства например нность но в целом надо помнить что это лишь набор рекомендаций И делить запросом мы можем например создать сущности Да потому что это в конечном итоге просто запрос и Эндер может его на своей части обработать как ему вздумается хоть создать сущность хоть удалить хоть с ошибкой упасть вот запросы в целом друг от друга никак не отличаются это просто вот конвенция по которой мы между проектами ходим и мы точно знаем что Ну вот верное метод Т нужен для того чтобы создать там нового пользователя на бэнде А пач чтобы поменять ему имя единственное важная особенность что у метода Get нет тела вернее засунуть его как бы всё-таки можно но сервер будет его игнорировать поэтому аргументы в Get запросах мы передаём через quy string То есть это асант вопросик равно но надо помнить что они как бы не зашифрованы поэтому наверно передавать там пароль логин не совсем верные решения Окей круто ещё у нас есть метод запросов для чего он нужен он запрашивает с сервера заголовки headers которые будут прикрепляться к каждому запросу это нужно например для ки и для других свойств типа Keep или cashing polic Окей про тип запроса поговорили У нас есть ещ статусы Приведи примеры и какие есть категории статусов статус коды это числа которые обозначают для нас итог исполнения запроса они делятся на подклассы по сотням то есть 100 - это информационные 200 - это успех 300 - это редирект Например когда мы переходим на десктопную версию приложения нас переадресовывается на м точечка Ну и там короче мобильная версия открывается на отдельном домене вот 400 - это ошибки не найдено или 4 Да и 500 - это ошибки сервера например сервер лежит упал или сервер ответил с некорректной ошибкой О круто какие есть версии Ну про версии htp Я не знаю вот знаю высказывание знаменитого стримера что ху в при уже достаточно современная штука версия htp у нас делится на три штуки их было чуть больше но основные их три первая версия Она появилась ещё давным-давно её уже никто не использует идея там в том что в рамках одного соединения у нас отправляется один tcp запрос tcp - это когда у нас гарантированная отправка запроса и гарантированное получение результата Поэтому в первой версии каждый пакет каждый запрос он ждёт выполнения предыдущего и само собой порядок вызова этих запросов тоже важен для нас мы отправили первый запрос первым он и вернётся это было не очень оптимизировано поэтому придумали вторую версию где в рамках одного того же самого tcp соединения мы можем уже отправлять несколько а запросов здесь уже нам порядок не важен Поэтому мы можем отправлять много запросов и они будут приходить в порядке как они Именно выполнились поэтому этот тип соединения уже сильно быстрее и сейчас уже появилась третья версия запроса Она более оптимизирована но она появилась совсем недавно поэтому используется только на сервисах Гугла и каких-то больших прямо корпораций идея в том что она реализована на поверх udp протокола с использованием протокола к а это значит То что в рамках одного соединения мы отправляем только один флайт запрос и не тратим время в следующих А этот протокол используется в первой очередь для мобильных приложений для мобильных сетей для вай-фая для мобильного интернета Когда у нас соединение нестабильное оно может прерываться и Если в рамках одного соединения какой-то пакет какой-то запрос у нас не дошёл то ничего страшного он никак не афект предыдущие и он завершится и вызове заново в этом идея всех версий htp запроса дорогой зритель надеюсь тебе нравится интервью маленькая просьба подпишись пожалуйста на канал Так ты не пропустишь следующее интервью полезные материалы про найм и кучу всего крутого короче Оформи пожалуйста подписочку поставь лайк и напиши комментарий понравилось ли тебе видео Это поможет продвижению в рекомендациях ну а мы продолжаем Окей давай перейдём к д скрипту а начнём с простого Расскажи что такое всплытие погружение событий что это вообще такое это механизм когда есть какой-то событие например нажатие и оно пробрасывается наверх в родительские элементы пока не будет остановлено всплыть Ну например у нас есть колокольчик где у нас уведомления то есть мы нажимаем на колокольчик всплывает overlay Да там видны там какие-нибудь обновления Вот и в какой-то момент мы хотим этот оверлей закрыть у нас на нём есть какой-нибудь маленький крестик но также мы хотим чтобы не только по нажатию на крестик совершалось закрытие но и если мы вне этого оверлея куда-нибудь тыкаем на окно то есть тыкнул он скрылся и пользователь обратно продолжает что-то делать в окне так вот если нажать в это окно а то событие будет передаваться родительским элементам и Например если там будет Кнопка это нажатие которое должно закрывать overlay дойдёт до обработчика этой кнопки и будет не очень хорошо вот Вот соответственно это всплыть нужно останавливать У нас есть метод ST propagation который прекращает обработку и прокиды дальнейшее наверх и у нас есть метод Stop immediate propagation который останавливает и в текущем элементе обработку Угу Окей это про всплытие Что такое погружение погружение - это соответственно обратный механизм который пробрасывается событие от родительского элемента вниз как бы внутрь но оно не работает по умолчанию его нужно включить передав третий аргумент функцию AD Event listener он Ну булевый флаг Ну и вот то есть событие прокиды ется от верхнего элемента например Window и проваливается до самого мелкого элемента например до кнопки Ну и наверное надо добавить что в целом в обработке событий есть три фазы это capture Face фаза захвата это Таргет и бабблинг когда событие всплывает Ну а Таргет - это соответственно фаза обработки Угу Да круто хорошо Давай перейдём к следующему вопросу Для чего нужен Event loop JavaScript - однопоточный язык программирования поэтому для выполнения асинхронных операций реализован механизм Event лупа грубо говоря мы сделали запрос на Кэн и мы не хотим синхронно ждать пока он ответи поэтому мы про него забываем и в этом цикле обрабатываем другие какие-то события которые намм приходят в систему когда приходит респонс от бэнда события того что у нас есть респонс надо бы его обработать кладётся в очередь обработки событий мы по ней проходим до конца и Event loop цикл событий начинается сначала у нас существует три типа операций синхронные операции это когда мы синхронно что-то делаем в жава скрипте Ну например складываем вычитаем вызываем функции Обращаемся к Local storage следующий тип - это микро таски это асинхронные события которые выполняются один раз и резолвится Ну например Это запросы к Кэн через промисы это это request Animation Frame это nexttick короче вот мы что-то попросили оно асинхронно выполнило мы получили какой-то ответ от этого и третий тип операции - это макро таски это события которые выполняются на браузер нам мапе Ну например Это Set Timeout и Set интервал то есть мы ставим на какое-то время функцию и она вызывается О&amp;#39;кей А для чего в целом служит это разделение Для чего нам три типа операций для приоритизации задач то есть в каждом тике первом выполняются синхронные операции Ну потому что они синхронные от них результат нужен быстрее всего далее идут микро таски и далее выполняется одна макро таска если макро таска порождает новые микро таски Ну например Мы в сет Тай делаем через промес Запрос к бэнда например то эти микро таски выполняются уже в следующем тике Окей ты когда упоминал про микрофронтенды подозреваю что у вас был не только прокш приложение но и де версия Расскажи как вы разграничивать деплой на эти окружения Да у нас Ну как я уже говорил у нас был деплой через gitlab всё C CD было настроено там и окружение Ну то есть домен куда будет деплоить приложение настраивала через переменное окружение то есть был какой-то унифицированный скрипт куда мы просто передаём параметр Ну а какое окружение мы передаём зависит от того какой у нас изначально скрипт запускался то есть ну когда мы там жим de мы запускаем скрипт deploy de и в этом deploy de написано переменная с доменом деплой туда для de Stage и вот этого всех вот стендов короче там их было несколько ещё А мы использовали Яндек Cloud а Давай перейдём с спак она уже такие более глобальные вещи а расскажи какие в целом есть уязвимости в вебе с чем ты сталкивался сам Да ну во-первых это инъекция это либо SQL инъекции когда мы просто пробрасывается в поле ввода То что нам ввели как бы Мы надеемся то что там ведут в фамилию Да например а человек вводит туда там Select звёздочка From Database там Delete звёздочка From Database Drop Table users Короче если этот код не проверяется вернее если эти данные не проверяются то Кэн их может исполнить например там вызвать какой-то SQ и если это не проверяется то Ну мы потеряем базу вот потом это HTML инъекции потому что Ну например если нам взламывают админку и передают какие-то вредоносные данные Ну вот например да Или просто через входной параметр опять же закидывают не SQL HTML потом когда мы его показываем этот код попадает на страницу соответственно исполняется и если там есть вредоносный код то может быть утечка данных каких-то и что-то нехорошее короче с нашим пользователем Вот это всё называется общим словом инъекция потому что нам подкладывают какой-то вредоносный код и мы его сами запускаем и поэтому у него есть доступ к нашим ресурсам и К данным второй вид уязвимости - это xss то есть Крос Сай скриптинг этот вид атаки заключается в том что нам подкладывают какой-то код который при выполнении обращается на другой сайт или домен и передаёт туда какие-то данные или что-то необходимую злоумышленнику Ну например злоумышленник каким-то образом убеждает пользователя открыть консоль и вбить туда какой-нибудь Код Этот код делает Запрос к Local storage мы как бы как разработчики со своей стороны предполагали что Local storage - это что-то локальное то есть что приложение не может туда получить доступ но так как человек сам запустил этот код у себя то из Local storage любые Sens данные вытягиваются Ну и например просто отправляются там злоумышленнику но на его бкд тем самым пользователь всё он он потерял данные вот произошёл взлом жопы вот как защититься Ну в первую очередь мы переносим Sensitive данные в cookies Но вообще способов xss а великое множество как бы хакеры прогрессируют Ну самым верным способом будет Content Security policy настройка Вайт листа а доменов к которым можно обращаться с нашего сайта Ну предполагается что там будут там либо наши домены либо домены нашего облачного хранилища короче то куда мы можем ходить и во всех других случаях чтобы Какие бы данные у нас там не украли их не могли никуда отправить с устройство пользователя Угу Да что есть ещё следующий вид Атак называется csrf - это когда данные об авторизации пользователя используются для вредоносных запросов Ну пример это классика когда нам Ну сейчас правда это ещё и моделируется собой платформой Но вот условно в нашем там 2007 Эх было время ВК кто-то тебе присылает ссылку там чекай что тут есть крутое тогда ещё а запрос на там взломать ВК бывшие Это была не просто шутка действительно можно было его взломать Ну короче можно было каким-то образом отправить тебе в личные сообщения к примеру вредоносную ссылку пользователь нажимает на неё происходит редирект с домена v.com на какой-то Вот сайт злоумышленников и там в фоне отправляется запрос а как бы злоумышленник не имеет доступа к нашему паролю и логину но так как мы Нажали на ссылку у нас браузер хранит ки Короче у нас есть ки где прописан токен например авторизации Ну вот там ВК Вот и соответственно наш запрос отрабатывает и злоумышленник авторизован нашим токеном авторизации и поэтому имеет тот же доступ что и у нас вот такая вот Атака О&amp;#39;кей как от такой штуки защититься защищаемся Так нам нужно убедиться что человек который открыл страницу и человек который отправил запрос - Это один и тот же человек для этого к нам присылает токен уникальный этого человека csrf токен и мы прикладываем его к каждому запросу и Кэн сравнивает что запрос пришёл именно от человека который открыл эту страницу вот ну сравнением токенов далее есть проблемы доступа этим кстати грешат и крупные компании Я как-то ра считал что то ли у Гугла то ли у майкрософта было выплачено какое-то А ну неимоверное Баунти за баги а потому что у них ручка которая меняет твой доступ была без доступа То есть можно было отправить пост запрос и типа присвоить себе админский доступ Ну это конкретный пример Давай вернёмся к базе то есть проблема доступа - это когда обычный пользователь Рядовой может получить доступ к админское странице или какой-то внутренней информации то есть ну открыть то что ему не нужно либо он может исполнить Запрос который не вернёт ошибку а действительно отработает опять же это бывает когда вот мы как бы на фронте сделали админку и мы уверены На 100% что на эту админку не попадёт пользователь без прав А ручки то есть мы не закрыли и на кэндес запрос Ну соответственно если человек находит эту ручку он может в неё стучаться и Не будучи админом там ну удалять что-то данные какие-то стягивать короче он делает с этой уязвимости дело десятое Ну это происходит просто из-за неправильно настроенных пермишен из-за Неправильно накида кода который по-хорошему должен запрещать какие-либо взаимодействия если пользователь не аутентификатора и когда мы на деве мы все логи А когда мы там на прот плом Мы хотим чтобы только ошибки например вот можно это неправильно настроить и чтобы постоянно сыпалась инфа какая-то которая там забьёт Лог за 5 минут кстати Раз уж упомянули про логи то Ну что-нибудь там залоги пароль не солёный или просто учётки это тоже частая уязвимость то есть Эндер фронтендер мы там умные ребята всё защитили сохранили А в логе Мы записали все учётные данные пользователей получается что злоумышленник получил доступ к логам и задам у нас всю базу пользователей по-моему таким славятся Да вообще все я не знаю мне кажется за последние несколько лет у каждой компании была такая уязвимость Во всяком случае в русском бигтех далее Ну я не знаю стоит упоминать Ну типа невыпущенные сертификаты использование http как бы запросы незащищенные да то есть их можно прочитать и что-то там in the midle вот это вот всё ну и наконец это использование библиотек не помню как называется этот вид уязвимости в кибербезопасности Но грубо говоря злоумышленник не обязан получить доступ к нашему проекту или даже к токену пользователя он может получить доступ к проекту который используется в нашем проекте То есть например для какой-нибудь там библиотеки Мы же не следим кто туда Что за комител вот просто это как-то само что-то там происходит Вот мы версии обновляем и вроде как всё зашибись А потом выясняется что там какая-нибудь компилировать код выполняет А этот шестнадцатиричную нам базу во времена небезызвестный событий двадцать второго года была уязвимость про которую я читал что вот там реально какая-то строка которая хитро преобразована но чтобы она не кидалась в глаза Да и она была добавлена в каком-то коммите кто-то версии обновлял И просто у всех шифровать что наверно людям мешало или вот со сдеком была какая-то похожая фигня но там они причину не обнародовали но я думаю что тоже какая-нибудь такая тупость потому что у них тоже зашифровать все базы И они их расшифровывать но тут защита простая во-первых не использовать репозитории там супер мега ультра react Ути с тремя звёздочками во-вторых обязательно фризить версии используемых фреймворков чтобы они не устанавливались как-то рандомно Когда вы мигрирует всеки их обновляйте Обязательно проверять что вы знаете что происходит Ну и такой базовый совет точно ли вам нужно какая-нибудь там последняя вплоть до минорной версии какого там вашего фреймворка старый добрый принцип работает Не трогай в принципе здесь актуален обычно Ну типа у нас это было так организовано есть какой-то отдельный спринт там ну не знаю раз в квартал где мы говорим Ну Неплохо бы обновить какие-нибудь зависимости Вот и мы их проверяем читаем там бак репорты что ничего не было Ну потому что обычно такое в опенсорс быстро палится ну там буквально 1-2 дня да Но люди успевают попасться Короче да ну естественно исходники можно почитать Но это мы оставим там кому-то другому вот и это оформляла именно в качестве задачи что человек там локально устанавливает тестит тестировщики проводят мини регресс какой-то Critical puff тестинг и только после того как мы убедились мы действительно обновляем а такого что один разработчик такой что-то Я хочу обновить версию чего-нибудь вот я такой понимаете но обновлять Это же круто вот такого нельзя делать Угу У вас в компании может быть было ещё какой-то департамент безопасни ков которые просто не допускали какие-то пакеты к установке Ну понятно что условно вот я сейчас это рассказываю Хотя у меня нету образования в компьютерной безопасности я как бы знаю эти уязвимости просто потому что это уже необходимая База Я думаю что если мы сюда посадили безопасника который Ну минимально участвовал там в capture The FL хотя бы пару раз он бы рассказал нам там ещё десяток крутых историй вот да конечно в компании есть отдел безопасности так как сфера банковская как бы работа с финансами очень не хочется потерять пользовательские данные вот которые Да есть там комитет который решает что мы можем использовать что не можем То есть если мне очень захочется использовать мою библиотеку какую-нибудь там на 50 звёздочек И даже если команда со мной согласится Ну я не смогу просто сказать Вот инстал это вот пацаны какая у нас крутая библиотека это всё должно пройти а и только тогда вот я её устанавливаю собственно говоря когда я упоминал что у нас в основном основные фреймворки реакта там и во вспомогательные Именно поэтому потому что ну мы не используем Рандомные библиотеки потому что их анализ на уязвимость анализ их контрибьютор там защищённости но это большое дело и просто так добавлять Рандомные библиотечка себе дороже легче просто написать своё решение Угу круто Полностью с тобой согласен у нас такая же в целом идея продвигается Давай перейдём прямо к базе Расскажи про Solid с примерами из фронта соответственно наконец-то наконец-то я ждал этого вопроса Solid я могу бесконечно про него говорить Вот Но если вдруг я переборщил responsibility буква с говорит нам о том что одна сущность имеет какую-то одну обязанность Потому что если мы начинаем добавлять к ней все возможные обязанности это становится км трудно понять его концепцию трудно его тести всё делать трудно например Ну вот у нас есть use Effect в нашей любимой библиотеке react и мы не можем в одном use эффекте сделать всё что нам хочется Ну например там сделать запрос потом записать этот запрос в кэш сходить в Local storage что-то там какое-то условие провести Вот это вот всё огромной цепочкой написать и вот так нельзя Нужно разбить это на отдельные действия отдельные use эффекты Ну вот есть у нас например лас юзр и там есть имя фамилия и мы хотим чтобы объект этого класса распечатался на принтере Ну и мы такие типа давай-ка добавим туда метод Print вот так нельзя у нас отдельно должен быть класс User printer или там printer который наследует класс User Print и вот туда мы должны передавать юзера и этот класс уже должен печатать юзера а юзер у нас в данном случае dto ну типа Data Transfer object который просто хранит данные и ничего с ними не делает Угу Да всё верно Следующее о - это Open closed принцип он говорит нам о том что сущности должны быть доступно для расширения но закрыто для изменения то есть менять уже написанные компоненты и сущности плохо потому что мы их как бы протестировали мы их оставили если мы хотим расширить или добавить поведение мы должны менять это в новых сущностях примеры с фронта Ну вот у нас есть например лист компонент который берёт массив данных и жат их там в булт лист и мы хотим добавить новое поведение чтобы когда мы наводим на определённый булет строка с ним там выделялось как-то подсвечивать вот в этом случае ошибкой будет взять и поменять определение вот этого базового компонента поведения Ну например добавить там в его конструктор параметр True fse и если True тогда вот он будет подсвечивать А если fse тогда не будет совсем плохо будет если мы пойдём по всему проекту поменяем и добавим там флс или дефолтный аргумент поставим вот это плохо правильным поведением будет использовать новый компонент который переиспользовать поведение старого и поверх него уже описывает поведение с вот этой вот подсветкой определённых пунктов в списке Да окей принцип подстановки Барбары лисков говорит нам о том что в Любую функцию мы можем передать Наследник её аргумента без изменения и без ошибки исполнения программы например есть у нас базовая кнопка которую мы куда-то передаём или что-то на неё прикрепляем и вот если мы вместо этой базовой кнопки захотим использовать другой компонент какую-то там раскрашенную кнопку Вот то мы должны это делать без изменения поведения если у нас есть в базовой кнопке какой-то метод то мы этот метод хотим уметь вызывать и в наследнике пример из продакшена даже есть когда-то у нас была иерархия мы делали плееры и вот был как бы плеер базовый был плеер VR был плеер там какой-то типа для стримов ну короче они чем-то отличались и вот плохой пример как раз был в том что мы добавляли когда 3D плеер да 360 viw Play а не работало имплементация по-другому никак потому что в базовом классе был была определена функция скриншот А в 3D плеере нельзя сделать скриншот Ну вернее вот там с тогдашней логикой нельзя было сделать скрин который бы возвращал скриншот и в реализации то есть в определении этой функции в 3D плеере она была переопределения этого принципа Да О&amp;#39;кей крутой пример далее идёт интерфейс segregation которая говорит о том что один интерфейс должен отвечать только там за определённое необходимое количество действий был каноничный пример когда-то читал в книжке дядюшка Боба кажется что там где-то он там какой-то класс откопал в си шарпи который для определения интерфейса наследника ожидал там определение Рид методов но то есть типа нужно было Если наследует Да там хочешь добавить поведение тебе нужно 30 методов определить другой пример наверно из Андройда раньше так было что ты вот добавляешь линер И тебе прям сразу там вставляется четы метода А тебе нужен только например да То есть ты не хочешь определять там что будет если на кнопку нажать если кнопку отпустить Вот тебе нужно вот там строго что-то одно Ну в джаваскрипт из фронта какой-нибудь пример привести Ну вот прям фронтовый хз Ну базово у нас есть какая-то иерархия наследования красивая которая нам кажется и всегда есть огромный Соблазн положить в базовый класс все возможные методы Ну типа там у нас есть не знаю юзер этот юзер умеет а умеет отдыхать Вот и мы пытаемся выстроить красивое наследование а потом мы понимаем что у нас например есть класс чиллер человек который только отдыхает То есть у не нет работы и соответственно он определить метод Work никак не может Ну вот соответственно чтобы эта иерархия была Стройная и логичная чтобы мы не попадали в такие ситуации Мы хотим разделить эти интерфейсы и не взе положить работать Мет отдыхать а например там сделать базовый класс там работник и базовый класс там безработный ещё такую проблему можно порешать с помощью множественного наследования в жесе но про это наверное в другой раз там много подков поведения Окей хорошо и наконец dependency inversion который говорит нам о том что большие сущности не должны завесить от конкретных маленьких сущностей реализации Ну например у нас используется како хранилище например Local storage Да мы хотим записывать какие-то данные и по сути взаимодействие с нашим хранилищем можно описать там методом сохранить и методом достать Вот Но в какой-то момент по какой-то вот ужасной причине мы вместо Local стод решаем использовать там ки или что-то ещё индекс db в этот момент мы понимаем что чтобы это сделать нам нужно по всему проекту пройтись и поменять вызов этой функции потому что до этого мы использовали конкретную реализацию Local storage вот чтобы этого не делать Мы зависим не от конкретной реализации то есть от Local storage а от какого-то условно интерфейса там Database или Stage Ну короче вот от какого-то интерфейса с этими двумя функциями Если вдруг мы хотим что-то поменять а хороший пример Вот кстати в тестах Мы хотим в тестах протестировать что идёт запись в базу данных мы же не можем каждый раз записывать Ну вернее можем Но это будет ущербно каждый раз записывать что-то в Local storage проверять потом очищать мы вме этого хотим подменить положить туда Да с таким же интерфейсом Да и протестировать Что произошло обращение к этим методам что туда что-то передалось что это там как-то сохранилось и тогда в этом моке мы его удобно тестим проверяем что там Да действительно было обращение к этому методу Ну вот Это пример из фронта Окей Ты сказал в мдина ча базово dependency inversion просто говорит нам о направлении зависимости Да что мы не должны завязывать вот на конкретную имплементации как мы этого добиваемся Это уже дело другое вот если у нас есть просто поле и мы закрыли абстракции его то есть вот ну не Local storage а закрыли абстракции там storage мы не обязаны при этом его как бы инъектирование его через конструктор мы уже соблюли dependency inversion тем не менее для гибкости удобства тестирования и удобство конфигурации приложения Мы скорее всего выносим это в Конструктор и через конструктор мы передаём конкретную реализацию то есть Local storage Окей вижу по ДС у тебя в целом всё в порядке давай сразу перейдём к тайп скрипту В чём его минус про плюсы Обычно говорят что он очень удобный типизировать проблема его использования главная проблема тайп скрипта в том что всё-таки это обёртка как бы обвязка вокруг жава скрипта А в ран тайме у нас всё равно и когда в языках со строгой типизацией Ну например в свифте мы пытаемся что-то сделать в ран тайме Ну например вот нам пришёл там с бэнда массив И мы хотим чтобы это был массив наших пользователей да то есть мы пытаемся расшифровать этот JS в тип пользователь у которого там есть имя фамилия вот как бы если имя фамилия действительно в этом У каждого объекта есть тогда это пользователи более того если это если оно происходит успешно у нас действительно массив объектов User у каждого можно вызвать метод который будет оперировать там Ну например метод Print который возьмёт имя фамилия там и сделает из них одну строку Да это будет так работать и более того если вдруг дешифровка произошла неправильно То есть это в джейсоне это вот не юзер Там просто какая-нибудь строка написана даже не массив мы получим ошибку обработаем пишем там что типа данные неправильные Вот то у нас так сделать не получается в тайп скрипте то есть мы получаем ошибку не в момент получения данных а в момент обращения к полю данных то есть мы Ну например мы можем типизировать промис да что ответ промис - Это массив пользователей и вот в резол промиса мы можем там обратиться к пятому элементу там у чет у пятого пользователя имя и ошибка будет только в этот момент А если мы этот массив например сохраним и когда-нибудь через 10 лет попробуем к нему обратиться то в этот момент будет ошибка вот это плохо потому что пока этот массив живёт пока мы его куда-то передаём и считаем что это юзер могут случиться какие-то баги более того это будет как бы ну неполноценный объект р то есть мы не сможем вызывать у него там метод этот прин да Безусловно можно сделать например написать там свою функцию преобразования действительно пробежаться по этим массивам создать юзера чтобы у него был этот метод или там проверить что все Поли есть короче написать свои проверки Но базово из коробки язык нам этого не предоставляет что очень печально Угу да это правда основная проблема языка в остальном типы провероч удобства для разработчика это всё правда есть я бы отметить ещё хотел что основ Ну как бы иногда в тайп скрипте случаются моменты когда разработчик Ну вот он просто устал он устал описывать этот там пятерной вложенный тип какой-нибудь там extens of s там вот это вот и он такой пускай будет э вот просто э и там гр нте Например я точно знаю что здесь будет какая-нибудь там фигня типа точно знаю что здесь будет число там или юзер вот ну естественно в любом почти таком случае всегда приходит юзера какая-нибудь  всё крашится И хотя мы себе обещали никогда так не делать именно в этом конкретном случае мы были на 100% уверены естественно случился какой-то капец Короче плохо то что можно тайпскрипт поха Кать отключить его и вернуться к отсутствию типов что конечно в больших проектах всегда сильно вредит команде Окей Ты упомянул Расскажи как е можно не до конца точно даные так Ну про я упомянул это отключение типизации то есть по сути мы забиваем на тари Работаем как ва скриптом unown - это множество всех типов из тайп скрипта то есть мы подразумеваем что там лежит что-то из ty скрипта Ну например в продакшене Мы так не пишем да но допустим у нас есть какой-то метод Get и там по какой-то странной причине может верну либо число либо строка знаю почему вот так там unown если мы хотим что-то делать с этим числом или со строкой то соответственно мы делаем type of там переменная и если это Number то делаем что-то что мы делаем с намм там не знаю инкремент если это строка то мы делаем в этом ифе что-то как со строкой но как бы вообще считается антипаттерны и делать конкретно так не надо Ну наверное можно какой-то продакшн кейс Выдумать в котором это необходимо Но считается что так делать плохо короче и далее есть never never - Это тип тайп скрипта который при своём выполнении вызывает ошибку каноничный пример вот у нас есть тип перечисления там два варианта Да мы пишем на него Switch Case и хотим что-то вернуть из функции Например если там такое то возвращаем такое если такое то возвращаем такое И если мы описываем эти два кейса и добавляем внизу de и там возвращаем переменную типа Never то в случае если мы добавим в этот тип перечисления третье значение и не добавим обработчик то есть не добавим на него кейс то в этом случае у нас код дойдёт до не вернётся переменная типа Never и будет ошибка тайп скрипта Окей проп тоже всё Давай перейдём к реакту Расскажи что это вообще за штука такая как он работает что там внутри происходит я тупой айсер Я только знаю что дн Абрамов написал Всё Давайте тогда я его расскажу - это библиотека которая позволяет более простым способом работать с дом деревом изначально с дом деревом Мы работали вручную и каждое его изменение достаточно дорого для браузера react же упрощает нам работу с дом деревом за счёт того что все изменения он делает с Виртуал домом Это копия нашего дом дерева которое хранится в виде объекта в джаваскрипт в рамках которого мы храним все пропсы всё состояние и все возможные методы которые можно делать с компонентами для понимания того что реакту нужно перерез recc это такой механизм который позволяет реакту понять если компонент какой-то перерисовал ему не нужно проверять его дочерние компоненты за счёт этого мы достигаем более лёгкой сложности сравнения всего нашего дерева компонентов если бы мы всё проверяли у нас было бы о от N в трей если мы проверяем по такому алгоритму то о отн что позволяет Ну более оптимально работать с нашим деревом что может вызывать рендер компонента в первую очередь это стейт и пропсы этого компонента потом идут ключи если мы рендере список и также рендер компонента вызывают изменение родительского элемента Так как если он перерисовал дочерние элементы у нас не будут проверяться и автоматически они перерезал Virtual дом представлен в виде дерева у которого каждый узел содержит пропсы и стейт По какому принципу сравниваются эти пропсы если у нас примитивы то они сравниваются по значению Если же у нас какие-то ссылочные типы данных то при каждом рендере у нас будет происходить перерисовка приложения потому что объекты массивы между каждым рендеров этой проблемы используется hog react meo которая как раз позволяет написать функцию проверки функцию компаратив пропсов между предыдущим перережет существуют й В списках которые тоже генерируют рендер для чего они вообще нужны если мы рендере список то каждый из элементов у нас по сути однотипны и чтобы понять что из этого нужно перерез ует й он должен быть уникальных в рамках каждого списка и не должен быть к примеру индексом или тем что при каждом перережет одним и тем же также в реакте присутствует механизм батчинг что это такое когда мы вызываем какую-то а операцию по обновлению компонента к примеру Set State то у нас будет тригери пере render Если же в одной функции у нас вызывается ДТ 10 таких функций то по-хорошему нам не нужно каждый раз Перерва наш компонент А мы собираем Все изменения в рамках этой функции либо в рамках одного Тика в нашем приложении и выполняем их за один раз на этом описание реакта заканчивается и мы можем переходить к следующему вопросу Антон какие есть методы жизненного цикла у компонентов первая фаза - это Mount то есть монтирование появление первый рендер компонента на странице узнать что она произошла мы можем использовав hook use Effect с пустыми зависимостями в любом функциональном компоненте либо в классовом компоненте использовать функцию component de Mount следующая фаза - это update вызывается при изменении стейта пропсов или при перерезать к ней мы можем использовав hook use Effect передав массив зависимости при изменении которых и вызывается собственно хук Ну и в классовом компоненте это component did update последняя фаза это unmount то есть разморозь от таймеров обработчиков события или веб сокетов в функциональном компоненте это та Функция которую мы возвращаем из use Effect то есть мы там пишем Return и вот эта функция вызове когда произойдёт unmount в классовом компоненте это функция комн Will and Mount Окей когда ты говорил про методы жизненного цикла ты упоминал фкт в функциональном компоненте это хук у нас для чего вообще нужны хуки хук - это функция которая запускается в контексте реакта с помощью самописный хуков мы можем переносить часть бизнес логики Ну как мы это делаем с обычными функциями мы можем переносить прямо в react компонент а важно что есть правила мы не можем вызывать хуки в цикле или в условиях Угу принимается А ты упомянул use контек Давай см обсудим для чего контекст как он работает в реакте есть проблема что по идее у нас как бы компоненты чистые они отрисовывать компонент это и показал Вот Но обычно в реакт приложениях У нас очень глубокая иерархия то есть там от верхнего компонента до какой-нибудь там микро кнопочки и иногда прос нужно Передать от самого родительского компонента в самый в самый низ Ну какой пример можно привести наверное там Тёмная или светлая Тема да вот очевидно что мы не хотим в каждый компонент добавлять отдельный прос Dark или лай тем и передавать по всей иерархии вот для решения этой проблемы у нас есть реак контекст который как бы объединяет это дерево общим контекстом и мы можем убрать вот такие вот пропсы туда это как бы ну по-хорошему наверное немножечко нарушает Вот эту вот чистоту когда вот ровно то что мы передали как пропсы толь от этого компоненты перерисуй Ну вот use контекст нужен для работы с этой с этим контекстом и для того чтобы оттуда какие-то пропсы доставать Окей редко пишут самописный контекст обычно для хранения каких-то глобальных данных там авторизация тема использует RX что это вообще такое Как работает к проектировать разработчика от передавать вот эти вот дочерние пропсы вглубь вглубь вглубь Ну концепция редакса какая у нас есть State это источник Правды вот у нас есть какие-то экшены то есть что мы хотим поменять в нём И у нас есть редьюс соответственно редьюс принимает экшн применяет стейт каким-то образом его меняет и возвращает нам новый стейт соответственно проблема которая при этом решается у нас ещё и добавляется тестирование лёгкое мы вообще отрываемся от компонентов мы можем тестировать вот чисто redx редсер который по-хорошему является чистой функцией Да он возвращает нам новое состояние на это всё очень удобно пишутся тесты здесь важно понимать что redx накладывает ограничения но как бы это ограничения архитектурные То есть как правильно делать Мы не можем А из компонента просто дёрнуть и достать что-то что нам нужно из стейта мы Для этого используем безопасные селекторы и естественно мы не можем из компонента этот стейт менять каким-то образом да модифицировать мы используем экшены экшн летит в редьюс и поэтому как бы считается что это хорошо и там большинство проблем наших решает помимо редакса существуют ещё другие реализации вот этого unidirectional Data Flow Да udf когда у нас компонент кидает Action Action заходит в редьюс й заходит в редьюс они там меняются йт возвращается он прокиды в компонент Ну и так вот по кругу да данные бесконечно крутятся но в одну сторону так вот существует ещё mobx Эктор мко Есть разница наверное которую надо подчеркнуть что в редакс то есть вот в этих реализациях можно создавать локальный стейт делать несколько разных стейтон общий стейт над ними да а в редакс у нас как бы сказано что вот есть глобальный стейт и всё как бы вот это важно он источник Правды О подходах Здесь можно спорить но я бы сказал что наверное уместно И то и другое Просто когда мы дробим й на несколько разных мы что-то не за синхронизировать в одном стойте у нас одно в другом стойте у нас другое ну как бы надо быть аккуратным в редакс эту проблему как бы решает он говорит нам нет всё хватит вот этим мы не занимаемся У нас есть просто один стейт всё это источник правды не надо думать ни о чём другом Давай перейдём к архитектуре а какие в целом существуют архитектуры В чём их плюсы В чём минусы я бы сказал что архитектур актуальных несколько давай начнём модульная архитектура Ну по сути это как бы не архитектура это способ структурировать проект у нас базово создаются папки redx types components и как бы вот такая вот структура у проекта то есть в каждую папку мы кладём что туда относится проблема здесь в том что такой способ очень плохо подходит для больших проектов потому что ну там в проекте может быть тысяча компонентов и поэтому Ну папка comp в которой 1000 файлов не особо не особо помогает бы получать доступ к тому что тебе нужно и не позволяет работать там комфортно Ну только через поиск как-то пытаться к этим компонентам переходить естественно это не только с кон связано а со всеми папками то есть в редакс у нас много экшенов много редьюс много стейта в типах Понятно У нас тоже там огромное количество короче каждая из этих папок превращается по сути в свалку по которой перемещаться Ну невозможно другая архитектура и способ группировки файлов па и так далее Это Atomic Design по аналогии с например системой компонентов мы подходим к дизайну и разбиения следующим образом у нас всё делится по крупности и по частоте использования Ну давай сразу к примерам всё начинается как бы с атомов это самые минимальные компоненты системы то есть Их уже нельзя никак разбить Ну например это может быть может быть Кнопка это может быть лейбл короче вот минимально возможный уже неделимый компонент далее из атомов мы собираем молекулу То есть это по-прежнему что-то небольшое Да но это уже сумма нескольких атомов Ну например вот инпут да у нас есть как бы лейбл рядом с инпутов вода логина Вот это Молекула а дальше у нас есть организм это несколько молекул Ну например давай продолжим эту разовьёт У нас есть inp рядом с ним йл например логин и то куда вводить логин далее У нас есть подпись там Password и поле Куда выводить пассворд далее У нас есть кнопка логин есть кнопка там са Up и есть какой-нибудь не знаю картинка там и надпись что это вообще-то Форма логина вот это как бы уже организм он живёт своей жизни он имеет какие-то свои функции законченные которые он может целиком выполнять Да мы понимаем что вот это организм А надо сказать что всё это разбивается по папкам именно следующим образом то есть у нас есть папка атомы У нас есть папка молекулы У нас есть папка организм и из организмов мы Составляем шаблоны или templates это ну грубо говоря шаблон страницы вот у нас есть страница пользователя и страница админа выглядит она наверное примерно одинаково да но функции доступны там разные и бизнес логика немножечко разная вот поэтому страница Да отображение это будет шаблон но в зависимости от роли мы будем подставлять и включать там разные функции и возможно какую-нибудь там разную кнопку добавим и последний самый большой уровень - это собственно страница или pages которые используют эти темплейты на странице мы подготавливаем данные и передаём их внутрь шаблона и всё у нас как бы получается ну страница А смысл этого дизайна как раз в том чтобы разбить по частоте использования по крупности и Ну так структура получается лучше нам легче искать определённые файлы К сожалению несмотря на кажущуюся красоту абстракции Да архитектуры проблема та же самая То есть у тебя в проекте Может быть там тысяча атомов каких-нибудь разных кнопок разных инпутов Ну и с каждым уровнем эта проблема может накапливаться то есть там организм использует которые эти кнопки эти кнопки Ну и как бы мы не Решаем изначальную проблему у нас по-прежнему очень много файлов у нас по-прежнему всё навалено в кучу но очень подходит для китов потому что в целом Когда наши дизайнеры фигме там у себя или в скетче или где-то ещё Надеюсь что не в адоп Фотошопе Короче когда они рисуют дизайн Ну если это хороший умный дизайнер Скорее всего он использует тот же самый подход То есть у него есть отдель кнопка которая везде перес пользуется у него есть отдельно там формочка отдельно короче Каждый элемент и из него уже собираются экраны из экранов собирается Flow из Flow собирается приложение короче вот так дальше идёт fsd или Design это наверное архитектура которая обладает наибольшей подробность и жёсткостью она прямо диктует разработчикам как структурировать проект и что куда класть хорошо Это наверное тем что при переходе с одного проекта на другой проект с fsd разработчик сразу понимает где и что лежит то есть структура папок жёстко диктует ему что куда надо положить Главное отличие от модульной архитектуры здесь в том что все файлы сгруппированы по названию бизнес фичи то есть вот у нас на бэнде там есть скорее всего какая-нибудь папка Юр где там лежат контроллеры где лежат модели пользователей Ну в идеале на нашем фронтенде всё точно повторяет этот то есть у нас есть тоже там папка юзеры папка товары папка карты там и так далее И вот уже в папке юзеры лежит Всё что относится к юзера То есть это Например redx компоненты типы Ну и какие-то файлы остаются в руте помимо этого у нас есть папка shared где лежит тот самый UI Kit То есть это какие-то базовые там атомы типа инпуты чекбоксы кнопки и у нас есть папка Widgets где лежат общие виджеты Ну типа там header футер Угу что ещё сказать-то Ну про плюсы Я уже сказал что на рынке она популярна мы приходим мы сразу во всём разбираемся и нам легче то есть мы условно работаем с фичей юзеров мы заходим в каталоге прямо в папку юзер и вот мы там в ней тусуемся Ну может быть иногда переключаем там на shed или на Widgets ну вряд ли Вот потому что оттуда мы скорее всего что-то переиспользовать время на то чтобы создать ту структуру изначально нужно бить по рукам если какая-то эта архитектура не соблюдается то есть кто-то хочет там к себе в папку что-то утащить то есть надо жёстко контролировать это шарена не шарена это виджеты не виджеты потому что ну если это не контролировать то это скатится туда вот как бы обратно к модульной архитектуре где у нас всё просто лежит одним комком из которого невозможно что-то конкретное быстро достать приходится искать круто мы когда разговаривали про ты говорил про уровень про UI Kit соответственно для чего вообще нужен UI Kit как его делать там силами уже готовых каких-то реализаций или самописная UI Kit нужен для упрощения разработки Но вообще UI Kit по-хорошему закладывается в дизайне потому что очень странно если в дизайне нету UI кита А у вас на фронтенде есть в чём идея мы не создаём каждый раз кнопку не присваиваем ей такой-то цвет чтобы разработчик каждый раз не ходил и проверял так это та же самая кнопка у неё такие же загнутые уголки у неё тот же шрифт у неё тот же там размер шрифта Вот у неё такой выделение когда мы на неё нажимаем или другое Нет мы сразу создаём компоненты Ну не будем про это вкратце атомы молекулы там организмы системы вот дизайн их в своей фигме соответственно раскладывает и мы по аналогии с ними тоже создаём простые компоненты там чекбоксы лейблы батоны инпуты из них делаем модули из модулей там делаем страницы и короче вот собираем Как из маленьких маленьких деталек наше приложение Ну важно что мы не каждый раз задаём новую кнопку присваиваем ей стиль там задаём нет это как бы у нас компонент всё Каждый раз когда мы используем кнопку она это вот она если мы захотим поменять что-то в этом компоненте это поменяется по всему приложению это Надо чётко понимать и ответственно к этому подходить ну как бы это круто Всем советую обязательно Попробуйте но понятно что не всегда есть такая возможность но вот проект как-то писался писался верста со хляб Ося тут фига много денег сразу там команда расширилась Хотя кита как бы до этого не было а можно своими силами попробовать написать если вы маленький один Одинокий разработчик Ну скажите дизайнерам смотрите Ребята в целом делаем приложение не слишком уникальное То есть у нас есть корпоративные цвета там у нас есть а э пара там картинок баннеров но в целом Почему бы нам не взять уже готовый uui Kit кого-нибудь другого в интернете их масса есть UI киты там компаний есть киты каких-то Open Source проектов кому-то просто в кайф вот разрабатывать свой ки поэтому давайте мы возьмём этот его как бы украдём Ну и немножечко кастомизированная и корпоративный цвет поставить Короче не надо писать всё это с нуля Если вы один тем не менее использовать Ну я бы порекомендовал всем Потому что это тупо удобнее сказали те шрифт везде поменять Ну тебе удобно к примерам Таких вот китов которые доступные всем желающим для использования можно отнести материл UI radix и und Design Окей сделали U Kit Как нам в целом с ним работать когда это просто папка которую ты не понимаешь как реализован достаточно сложно понять как как что устроено Как выглядит компонент вы использовали что-нибудь для визуализации Да мы используем storybook он как раз и нужен для визуализации работы каждого компонента чтобы мы в любой момент могли зайти и посмотреть как та или иная кнопка там чекбокс себя ведёт ну соответственно разработчик который только-только пришёл на проект может туда зайти и посмотреть что у нас вообще есть потому что наверное одна из основных проблем с UI китом - это когда человек там тратит 5 секунд не находит нужный ему компоненты такой О сейчас я буду программировать Я создам новый компонент потом это не дай бог кто-то не замечает выясняется что у нас там кнопка которая отличается Ну я не знаю радиусом уголка Да она используется там в пяти разных местах разной реализации потом кто-то приходит это фак ну короче вот storybook эту проблему решает там есть термин Story есть термин компоненты вот у нас созданы компонент и для каждой новой фичи мы заводим новую рю и в ней видно как и что себя будет вести Надеюсь тебе понравилась теоретическая часть Но обычно на собеседованиях просят по лайф кодить это как обычные задачки на понимание устройства жава скрипта так и задачи на рендер так и алгоритмические задачки Короче мы мы с моим дорогим интервьюеров по одной задаче из каждого пункта решение это ты безусловно этих задач и сам нагу лишь но важно то что мы дали советы как интервьюируемый должен мыслить Какие правильные вопросы он должен задавать и как он себя должен вести Например если ты считаешь что надо просто молча писать решение задачи пока оно не выведется в консоль значит скорее всего ты будешь оценен негативно на таком этапе интервью поэтому я тебя приглашаю посмотреть эти советы И решение задач в полной части интервью там же ты найдёшь ещё больше теоретических вопросов и конечно объяснение теории по каждому заданному вопросу со ссылками таймкодами и подобной инфой Где тебе восполнить пробелы в своём знании короче переходи по ссылке там полная часть кайф с теорией у тебя всё хорошо Давай перейдём к практике вот первая задача передовой стандартная задача на Event loop тебе нужно сказать что выведет в каком порядке ну и желательно ещё рассказать почему так произойдёт Да я вижу что в задаче есть таймаут промисы лх короче очевидно что э задача про Event loop у нас был теоретический вопрос я рассказывал что в языке JavaScript есть понятие Event loop которое помогает нам работать с асинхронными задачами там есть три типа задач Первое - это асинхронная операция в частности у нас это conso Log 4 которая написана ниже всего она выполняется синхронно далее есть микро таски это промисы и всё связанное с ними и далее есть макро таски это Set Тай и Set интервал ну здесь у нас есть Set Timeout просто в соответствии с этой теорией давайте я буду называть цифру и говорить почему она выведется Я считаю что первая выведется цифра два потому что это тело промиса тело промиса выполняется синхронно за ней выполнится строка кон Log 4 потому что это вторая синхронная операция больше здесь синхронных операций нет всё остальное микро таски или макро таски далее выполнится микро таска и выведется цифра п и се тут наверно надо пояснить Почему не 5 6 се потому что создание каждого Нового prom это создание новой микро таски которая будет обработана в следующий виток Event лупа Вот соответственно 2 4 5 7 далее 68 это новый тик уже и наконец о потому что Set Timeout - это макро таска которая имеет наименьший приоритет и выполнится после res микро хорошо представим ситуацию что у нас будет макро рождает ещё какие-то промес у нас и у нас ещё есть ниже сет таймаута то есть макро таски Что первым выполнится Вот этот новый порождённый промес микро таска или оставшиеся макро таски Итак что мы видим У нас два вызова сет таймаута это оба макро таски сначала выполняется первый се Тай выводится один внутри создаётся промис это микро таска выводится два потому что микро таска имеет больший приоритет чем макро таска и потом выводится три То есть один 2 Угу Да окей Всё правильно смотрите ребят здесь я вывез за счёт знания теории потому что я понимаю приоритет выполнение микромакро таск асинхронных операций Но честно если бы я решал эту задачу сам И когда я решал подобные задачи на iOS там тоже есть всякие пазле с асинхронной где не очевидным образом что-то выводится я вообще не вижу повода Почему я не могу скопировать эту задачу Вить её в локальную IDE запустить и рассуждать уже будучи уверенным в выполнении её результата только не тупите в таких консолях для шаринга кода иногда есть инструмент который позволяет трекать во-первых что вы выделяется код и где ваш курсор находится А во-вторых инструмент который показывает активны вы в этом окне или нет то есть если вы сворачивается браузер интервьюер видит что у вас зелёненькая лампочка пропадает да либо если вы копируете код вид что вы всё скопировали потом сказали ответ что предлагается сделать во-первых это использовать виртуальную машину для собеседований То есть у вас отдельно окно где открыт ваш браузер там же у вас Zoom или через что вы созванивались с интервьюеров Вы можете его даже пошарить ну всё окно если интервьюер того попросит а снаружи этой виртуальной машины на обычной ваший операционной системы открыты любые вспомогательные инструменты типа там чат gpt консоль IDE Да хоть discord с вашим другом а в целом Этот способ никак нельзя проверить потому что вы шарите экран вот вашей виртуальной машины а снаружи что угодно происходит интервю никак об этом не узнает причём есть всякие этеншен Тут уж кому как нравится есть экстеншн где экран скринит оттуда парси текст но по-моему просто скопировать вставить в IDE искать вот там 3 4 8 5 6 и дальше объяснить Это с теорией очень нужно Ну и ни в коем случае не говорите просто ответ то есть порядок цифр Старайтесь рассуждать и показывать что вы понимаете почему так происходит Ну хотя бы какие-то догадки высказывайте да Давай перейдём к следующей задаче здесь я тебя попрошу не просто сказать решение но и в самом начале объяснить как ты будешь к нему приходить эта задача у нас на промисы тебе нужно написать самописный Promise All и Promise All settled в идеале чтобы ты тоже рассказал В чём разница этих методов и как можно ещё работать с параллельными запросами в жава скрипте надо начать с того что в джаваскрипт есть разные методы для работы с набором промисов Когда например нам нужно выполнить несколько асинхронных запросов во-первых это прос All если все переданные промисы завершаются успешно то просол тоже завершается успешно Если же хотя бы один промес падает с ошибкой то прол падает с ошибкой и не дожидается выполнение остальных промисов далее прос All settled а поведение другое То есть тут обязательно выполняются все промисы если они все выполняются успешно то промис тоже выполняется успешно Если же хотя бы один промис переданный выполняется с ошибкой то нам возвращает PR All массив где объект и в каждом объекте лежит статус выполнения промиса и дата которая пришла далее промис Race Мы ждём первый выполнивший промис неважно с ошибкой или с успехом и промис возвращает его результат и промис any мы ждём первый успешно выполнивший промис и возвращаем его результат соответственно в обоих и в рейни мы не дожидаемся выполнения всех промисов Угу окей Давай перейдём тогда к коду как бы ты делал самописный prom All и prom All settled реализация метода prom All очевидно что prom All тоже возвращает прос так как это асинхронная операция внутри этого промеса нам нужно пробежаться по всем передам нам просом запустить их и в прицепить к ним обработчик через then в котором мы будем считать количество выполненных промисов если мы понимаем что количество выполненных промисов уже достигло количество промисов которые нам изначально передали это значит мы можем зарез Вить наш изначальный промес либо если мы встретили ошибку Это означает что мы должны упасть и вернуть эту ошибку хорошо а почему мы не можем просто сделать проход цикло фор с эйм чтобы мы ждали каждую операцию пример потому что в этом случае мы уйдём от асинхронной природы промиса и получится что мы ждём в каждом цикле выполнения промеса и грубо говоря выполняем их друг за другом то есть выполнили промис перешли к следующему промис выполнили его то есть таким образом наш оператор грубо говоря сломает поведение промес Мы хотим чтобы они выполнялись параллельно и не ждали выполнения друг друга что мы сделали в результате Давай по строчкам пробежимся Ну во-первых Мы создали массив для результатов во-вторых У нас есть счётчик выполненных промисов мы бежим по массиву и в каждом цикле цепляем к промес обработчик внутри обработчика мы увеличиваем счётчик выполненных промисов запоминаем дату которая была в результате и соответственно если длина массива нашего с изначально переданным промес становится равна счётчику выполненных промисов в этом случае мы резол изначальный промес который возвращается из функции прос Если же хотя бы один промес вернулся с ошибкой то мы ректи этот промес ну вот такая реализация Окей оператор allsettled мы обсудили реализация сильно напоминает реализацию проми за исключением того что в случае ошибки мы не заливаем весь промис мы должны хранить все результаты поэтому мы создаём массив результатов а пробега в цикле по массиву изначальных промисов запускаем их и в резол промиса мы кладём результат по индексу в Кэт этого промиса мы кладём ошибку по индексу Ну вернее мы кладём статус rejected и ответ который мы получили соответственно всё это оборачиваем в файнали и если у нас счётчик промисов уже достиг счётчика изначальных промисов тогда мы лви провес с массивом нашего результата а реализация вот О&amp;#39;кей Давай перейдём к следующей задаче у тебя задача на проверку корректности строки со скобочка чтобы все открывающие скобки имели свою закрывающую скобку если где-то она открылась и не закрылась либо закрылась и не открылась то нужно вернуть ЛС если строка корректная то нужно вернуть тру соответственно скажи как ты это будешь решать О&amp;#39;кей А это стандартный алгоритм мы должны использовать структуру данных стек и мы должны идти по строке итеративности мы проверяем если стек пустой то мы кладём в него элемент без всякого условия если в стеке уже есть элемент то мы проверяем совпадает ли он с текущим элементом Ну то есть что если в стег открывающаяся скобочка и мы встретили на следующем символе закрывающуюся скобочку то мы понимаем что всё Оке вытаскиваем из стека предыдущую скобку и переходим к следующему символу изначальной строке если мы встретили некорректную последовательность например открывающаяся скобка в стеке квадратная А в строке закрывающаяся круглая Это значит что у нас что-то пошло не так и мы можем возвращать ошибку строка не является корректной Угу Да отлично давай перем к написанию кода как ты будешь реализовывать структуру к в крипте нук использу канонично если у нас в языке нету такой структуры Я не думаю что есть смысл её реализовывать мы можем просто использовать массив ну главное помнить Из какого индекса Мы хотим что-то брать дополнительная сложность которая есть в этой задаче состоит в том что у нас несколько видов скобок то есть каноничный алгоритм который я рассказал А он обычно используется просто круглые скобки а здесь у нас круглые квадратные треугольные Давай представим что их там не четыре а типа 20 и напишем сразу решение предполагая что у нас этих скобок этих пар может быть неограниченное значение соответственно решим это создав три структуры данных Первое это объект или мапа в данном случае скобки где по ключу лежат открывающиеся по значению закрывающихся соответственно их там может лежать сколько угодно Ну там бесконечно условно далее Нам нужно два массива открывающиеся скобки массив и закрывающиеся скобки в одинаковом порядке соответственно как я уже сказал мы бежим по последовательности как по массиву символов и проверяем если символ является открывающим то есть принадлежит к массиву открывающихся скобок тогда мы кладём его в стек если символ является закрывающим то мы проверяем последнее значение в стеке равняется ли его ключу в нашей мапе то есть что эти две скобки соответствуют образом мы не дублируем код и нам не нужно перечислять вот эти вот пары То есть если скобка такая то нужно проверить что закрывающаяся такая мы от всего этого уходим решение становится коротким Ну и короче если это пара то всё О&amp;#39;кей Мы из массива значение удаляем из стека из нашего вот и переходим дальше если это не пара то Дальше можно не смотреть Это ошибка и мы выходим из функции угу вот также стоит отметить что наверное здесь нужно обсудить краевые значения Если это важно Ну например что мы должны вернуть в случае если там передана пустая строка или строка вообще без скобок Ну то есть добавить там какие-то проверки что если мы нашли пустую последовательность например является ли пустая строка позитивным результатом функции возвращаем ли мы её как правильную последовательность с на случа Да О&amp;#39;кей Ну тогда вот решение Ну я просто хотел напомнить что всегда в таких случаях какому-то дотошно интервью нужно уточнять Ну например А что если в строке придёт Минус один да Или придёт пустая строка ну короче надо у него спросить что в каких случаях мы должны возвращать даже если вам кажется это очевидным всё равно проговорите это уточните у него и скажите что вот типа я об этом подумал Скорее всего он скажет пофиг решай как-нибудь Главное чтобы основная функция отрабатывал корректно что хочется сказать в общем про решение задач задача прок даже мне понравилась то есть т я ничего в ней особо не понимаю я вижу насколько сильно она проверяет действительно умение работать и когда мне в мою будущность программистам давали похожие задачи по айос мне это очень нравилось потому что ну если ты такую задачу решил и все косяки увидел то как бы Какие к тебе могут быть вопросы Что касается задач на стеки переворачивание строк поиск одинаковых символов а или там работу с асинхрон Ну честно я не вижу здесь большого применения вряд ли у тебя будет в проекте пять раз типа Set Timeout Promise then Promise then Promise вот Ну и к тому же у тебя всегда как бы есть консоль А здесь у тебя проверяют умение как бы скомпилировать и запустить JavaScript код в голове не знаю зачем это нужно как бы всегда можно добавить ко Here и посмотреть Ну короче на рынке действительно спрашивают алгоритмические задачи мы сейчас не говорим про то объективно это не объективно надо не надо хотя спойлер на работе Когда вы придёте вряд ли вам скажут А вот тебе нужно палиндромы искать в строках теперь давай это твоя задача на месяц вот вряд ли так будет короче по подготовке нужно подрочить Easy Medium level Лид кода и Хотя я считаю что это абсолютно ненужное знание Но каждый раз там что-то пытаться судорожно вбивать в чат gpt ничего не понимать или там в наушник чтобы тебе шептали Ну это кринж то есть мне кажется что быстрее действительно за  там семь-восемь паттернов через которые все эти задачи решаются выучить три основных структуры данных это там хэш мапа стек Что ещё Всё тогда две основных структуры данных Ну может быть дерево Хотя Уж не знаю кто будет заставлять дерево решать вот Ну а если вы хотите попробовать себя в тех компаний мы не будем их рекламировать но скорее всего вы о них узнаете довольно быстро где от вас действительно просят какой-то там р level то есть действительно вращать деревья какие-то графы строить тут я вас предостерегают дрочки вот этих вот Хард задач лучше Попробуйте действительно решить это через чат gpt или с помогатора или зайти в бот вопросов от нашего дорогого сообщества или зайти в его чат и узнать Какие вопросы были на собеседовании на фронтенд разработчика в эту конкретную компанию подготовиться к ним и прийти с готовым решением Я считаю что это во-первых абсолютно морально потому что ну типа Если интервьюер идиот то Ну спасать его от его интеллекта можно только нам во-вторых Я считаю что это абсолютно никак не проверяет умение работать То есть спросить-то можно что угодно но Короче я вам рассказал все способы убеждать в моральности а моральности не буду Ну и в очередной раз спасибо Арсению за проведение технической части Антон А почему во время интервью на тебе поменялась одежда потому что мы записывали это интервью наверное часов 10 суммарно я надеюсь дорогой зритель что тебе очень понравилось обязательно подпишись на канал Поставь лайк напиши комментарий Это поможет продвижению видео Ну и Удачной тебе подготовки к собеседования начни уже зарабатывать больше это были Атон Назаров и Арсений храмцов Спасибо Сеня",
  "chapters": {
    "textLanguage": "ru",
    "chapters": [
      {
        "title": "Самое полное мок-интервью на frontend-разработчика",
        "text": "Всем привет Сегодня будет МОК собеседование по фронтенду как только я щёлкну пальцами мы с моим сегодняшним гостем арсением хромцово превратимся в интервьюера и интервью его рекомендация по просмотру перед тем как я начну отвечать на вопрос Арсения рекомендую поставить на паузу и попробовать ответить на вопрос самому Это даст тебе 100 процентную гарантию что ты действительно готов к собеседованию потому что сегодня мы перечислим все самые популярные вопросы которые вот прямо сейчас за стеной спрашивают на рынке найма в it пытайся на этот вопрос ответить Проверяй себя по нашему ответу Ну а если тебе необходима дополнительная документация и какие-то ссылки где можно почитать и восполнить пробелы в знаниях то Переходи в описание там есть м коды и для каждого тайм кода вопроса добавлена ссылка на официальные источники ну погнали Да Привет Антон Сегодня мы тебя собеседуем на должности сеньор фронтенд разработчика и Давай в первую очередь начнём с резюме А ты писал что ты работаешь в нонейм банке А расскажи пожалуйста как у вас вообще был устроен процесс работы Какие самые крутые задачи ты делал Что вообще было по стеку Давай начну немножко про себя в общем мне 27 лет я закончил Питерский Политех У меня есть диплом бакалавра и магистра Я учился на обеспечении качество программного обеспечения в ame бан Я попал 2 года назад я работаю в команде которая занимается предоставлением услуг и отчётов для юридических лиц Мы работаем над инвестиционными продуктами и документооборотом поначалу проект даже не был раскачай на пользователей Мы работали по методологии кабан но недавно год назад примерно наконец-то зарезали и теперь как-то процессы устаканится стандартно используем JavaScript с typ скриптом react redux для запросов используем axios для формочек используем react hook form C CD у нас организовано просто через gitlab ну и для тестов мы используем jest и для UI тестов playwright Скажи пожалуйста тесты вы начали писать ещё в самом начале проекта или только когда вы его начали переводить на продакшн К сожалению тут мой ответ бьётся на правильный и как Действительно получилось Я большой фанат того что тесты в продукте должны быть с самого начала до того как написана первая строчка кода уже должны быть тест-кейсы прописаны на созвоне с бизнес-аналитиком и проектным менеджером к сожалению у нас это получилось немножечко не так но за год мы от полу хаотичного кабана Когда в любой момент может прилететь задача которую вот надо типа Бросить всё и пилить её перешли всё-таки к скраму И теперь мы работаем Ну по нормальной методологии то есть сначала qa инженеры А про Команду наверное стоило ещё рассказать вообще в нашем ноунейм банке Много народу около дети команд в моей команде три фронта один Лид над фронтами Ну соответственно НР а два ручника Q один автоматизатор Ну и дизайнер продукто оунер и Проектный менеджер коче мы ти автономный который занимается Вот только нашей частью всего приложения Окей было ли такое что прилетали какие-то задачи которые затрагивали несколько команд и вам приходилось как-то взаимодействовать Да конечно иногда есть какие-то интеграции которые должны торчать наружу иногда наш попп открывается из другого места поэтому конечно такой взаимодействие предполагает Ну митинги между командами мы согласуем контракты Ну в целом Ува Окей Расскажи ВМ как шла работа задачей как она появлялась и как она попадала в продакшене Да конечно ну тут как бы у нас см и Flow Давай как-то просто среднестатистический спринт я расскажу начинается в общем спринт И в этот момент у нас происходит Груминг задачи в спринт достаются из бэклога в этот бэклог они попадают на квартальном планировании потом Проектный менеджер там утр сает все детали аналитиком а тестировщики разбирают это на написание тест-кейсов мы что-то читаем что-то переспрашивает уже с каким-то списком оформленных целиком задач чтобы не спрашивать типа А что здесь надо сделать ничего не понятно Вот на Груминг оцениваем Если слишком много мы используем рипо Если слишком много то разбиваем декомпозировать поэтому Значит надо её разбивать и получать какие-то вменяемые оценки Всё дальше Лид раскидывает асат задачи мы приступаем к их разработке Как происходит конкретно одна атомарная задача с точки зрения разработчика а ркд дев ветки фичи ветки в ней идёт разработка когда разработка подходит к логично итогу кажется всё готова и минимально протестирована самим разработчиком создаётся Pull request в де в этот момент C CD отправляет э сборочка тестировщику на Сати тестирование То есть он проверяет что это фича в порядке Мы МР Можем всё это дело в develop Ну и так разработчики решаем конфликты там происходит процесс Quad review Ну думаю что Про это можно не рассказывать в компании слава Богу уже есть linter Style Guide то есть мало ругаемся на код Review А в основном всё уже автоматизировано что можно то есть то есть из-за скобочек умеем не спорить вот Ну так происходит работа у всех в какой-то момент некоторые спринты Мы просто не релиз только на стейджинг накатывает Так что мы срезаем на стейдж это отправляется на регресс для тестировщиков А вот в эту ветку сй мы больше ничего не льём Если тестировщики говорят что что-то не так есть дефекты прямо в стейджинг это также через Фиксы Фикси потом происходит Back merch в develop Когда мы выкатили это ну всякие крутые практики нормального релиза У нас тоже есть то есть у нас есть Альфа версии У нас есть фича Оглы У нас есть paral rollout когда мы раскатываем там только на часть пользователей нашу сборочка Вот и смотрим что они ответят какие у нас ещё есть артефакты скрама у нас дейлики Мы стараемся сводить их минимально к Привет Какие есть проблемы Успею ли закончить всё обычно 20 минут с головой хватает на команду У нас есть ретроспектива как раз-таки вот в первый год было очень много баталий по поводу Канбан и его преобразования в скрам наконец-то мы всё это сделали чему Я признаться рад сейчас в основном ну ретроспектива короче спокойно проходит Не суть Да вроде всё что когда у вас проходит квартальное планирование вы также в стори поинтах оцениваете или какими-то более ещё абстрактными вещами потому что как будто бы там ценить нереально ещё задачу ну на квартальном планировании Мы в основном мыслим категориями эпиков потому что обсуждать там куда мы подвинется цвета конечно же чересчур то есть в эк создаются Эпики они приоритизировать в этом спринте в этот момент Эпик наполняется User Stories так как Эпики трудно оценивать в ри поинтах и очевидно они все больше там 15 больше 100 ри поинтов на Epic скидывается примерное количество дней ну как бы это иногда там происходит с пнг покером Иногда просто Ну наверное это там месяца два займёт Ну наверное да когда мы понимаем что приоритет этого Эпика подошёл и вот сейчас в следующем спринте кажется пора будет им заниматься Epic плотно наполняется расписываются User Stories и декомпозировать и вот их мы уже оцениваем в стори поинтах чтобы ну по графике по аналитике жиры понимать что вот этот спринт мы укомплектовали и он запускается Окей окей тут вообще вопросов нету Расскажи тогда о самых крутых задачах которые ты вообще делал на работе за последнее время самая крутая и масштабная задача связана с событиями из-за которых сап компания покинула территорию Российской Федерации и как бы мы использовали под капотом В общем его наш банк но так как теперь это продукт санкционный его использовать нельзя нам пришлось админку перепилить с нуля там масса различных фичей Если надо я конечно про них конкретно расскажу но давай сосредоточимся именно на моих достижений в общем самая масштабная задача была табличка ну не не просто табличка О'кей а то есть идея в том что пользователь может загружать разнообразные данные в разнообразном формате там может быть разное количество полей и ну как бы вот мы закидываем это и табличка должна преобразоваться и подстроиться под эти данные что я имею в виду например А в таблице есть имя фамилия возраст тогда у нас в таблице появляются эти поля и мы можем фильтровать по ним и делать какие-то простейшие сортировочные действия ну к примеру мы можем отфильтровать возраст от и до надеюсь тебе нравится глубина и полнота ответов на вопросы спешу обрадовать на самом деле эта часть видео которое выложено на YouTube неполное в полной режиссёрского версии Мы рассмотрели ещё больше технических архитектурных и софтов вопросов и снабдили их подробной тестовой расшифровкой с полными ответами пруфами и ссылками на дополнительные материалы она доступна после подписки на сообщество осознанной меркантильность для всех участников переходи по ссылке в описании после подписки тебе станет доступно Не только это интервью но и многие другие даже записи реальных собеседований в русские и не только бигтех Ну и конечно профильные технические чаты Где тебе помогут с подготовкой поделятся вопросами в конкретную команду короче за подписку ты получишь доступ к целой экосистеме для подготовки к собеседования переходи по ссылке в описании подписывайся на бусте и смотри полное видео со всеми вопросами и подробными ответами ну а мы продолжаем хорошо про основной функци фона в целом Понятно Расскажи в чём ещё Техническая сложность была потому что как будто таблица выводится Поля не так как будто рдо так Мы работаем С банковскими данными у них может быть неизвестный большой объём То есть это может быть во-первых много столбцов это может быть много строк то есть кидают там гигабайт най экселевский Файлик и было бы неплохо чтобы он распарсить всю оперативку скролл не будет работать поэтому стояла задача виртуализации таблицы то есть мы рендере ту часть которая тся во вьюпорте пользователя логичный вопрос А что бы просто не взять какую-нибудь библиотеку которая уже всё это порешал за нас Ну к сожалению это всё-таки банковская сфера и устанавливать случайные пакеты не получается Поэтому у нас только самые основные библиотеки используются А вот такие прикладные вещи мы пишем руками Поэтому вот я реализовывался через нативный CSS ну все элементы имеют одинаковую высоту я относительно скролла высчитывали стартовый индекс и финальный индекс элемента рендерит только эту часть в CSS изменяя свойства translate Y так как В тупую менять топ К сожалению бы не получилось потому что ну там есть особенность что топ заставляет рендерится страницу вычисление происходит на CPU А ну это было бы черезчур много Угу О'кей про это чуть попозже поговорим хорошо Ты упомянул бесконечный скролл А для чего он был нужен Ну идея в том что мы листаем - таблицу и мы не хотим нажимать на кнопку lad More или там перелистнуть на Следующую страницу хотя это могло бы решить проблемы Но как бы это хуже бы работало с фильтрации да и просто с наглядностью бесконечный скролл Ну подгружает чуть-чуть заранее чтобы пользователь не видел нас наш индикатор ler чтобы ну он видел сразу таблицу до конца Хорошо ты сказал что в этой странице ещё были фильтры по возрасту по имейлу если я быстро буду их изменять то таблица наверное тоже будет перескакивать очень быстро нет здесь использовал концепцию debounce Ну идея в том что у нас есть много событий и мы не на каждое событие в тупую отправляем запрос а мы ждём пока На некотором интервале э события как бы закончится и Ну например Я очень быстро печатаю И это не значит что я отправляю на каждый запрос на каждую введён ную букву запрос на энд Я жду пока пользователь допечатная лишнее о'кей О'кей круто ещё с этой фич связано что Ну я рассказал Вот про способы поставки туда данных на самом деле их нужно было поддерживать несколько То есть например можно для создания такого отчёта просто указать ссылку на backend endp с необходимыми фильтрами и создать отчёт из неё второй формат мы просто выбираем BD который у нас крутится прописываем SQL запрос и табличка сама достаёт всё нужное из этой БД по этому иль запросу и третье это как раз разбор больших файлов типа гигабайт 2 гиб и подгрузка информации из них здесь сложность состояла в том что естественно браузер по умолчанию не переварит гигабайт файл Вот это так не работает поэтому Был использован таз для",
        "tokens": 4998
      }
    ]
  },
  "semantic": {
    "textLanguage": "ru",
    "blocks": [
      {
        "title": "Введение и рекомендации по собеседованию",
        "text": "Всем привет Сегодня будет МОК собеседование по фронтенду как только я щёлкну пальцами мы с моим сегодняшним гостем арсением хромцово превратимся в интервьюера и интервью его рекомендация по просмотру перед тем как я начну отвечать на вопрос Арсения рекомендую поставить на паузу и попробовать ответить на вопрос самому Это даст тебе 100 процентную гарантию что ты действительно готов к собеседованию потому что сегодня мы перечислим все самые популярные вопросы которые вот прямо сейчас за стеной спрашивают на рынке найма в it пытайся на этот вопрос ответить Проверяй себя по нашему ответу Ну а если тебе необходима дополнительная документация и какие-то ссылки где можно почитать и восполнить пробелы в знаниях то Переходи в описание там есть м коды и для каждого тайм кода вопроса добавлена ссылка на официальные источники ну погнали",
        "tokens": 168
      },
      {
        "title": "Начало собеседования и описание опыта",
        "text": "Да Привет Антон Сегодня мы тебя собеседуем на должности сеньор фронтенд разработчика и Давай в первую очередь начнём с резюме А ты писал что ты работаешь в нонейм банке А расскажи пожалуйста как у вас вообще был устроен процесс работы Какие самые крутые задачи ты делал Что вообще было по стеку Давай начну немножко про себя в общем мне 27 лет я закончил Питерский Политех У меня есть диплом бакалавра и магистра Я учился на обеспечении качество программного обеспечения в ame бан Я попал 2 года назад я работаю в команде которая занимается предоставлением услуг и отчётов для юридических лиц Мы работаем над инвестиционными продуктами и документооборотом поначалу проект даже не был раскачай на пользователей Мы работали по методологии кабан но недавно год назад примерно наконец-то зарезали и теперь как-то процессы устаканится стандартно используем JavaScript с typ скриптом react redux для запросов используем axios для формочек используем react hook form C CD у нас организовано просто через gitlab ну и для тестов мы используем jest и для UI тестов playwright",
        "tokens": 221
      },
      {
        "title": "Тестирование и методологии разработки",
        "text": "Скажи пожалуйста тесты вы начали писать ещё в самом начале проекта или только когда вы его начали переводить на продакшн К сожалению тут мой ответ бьётся на правильный и как Действительно получилось Я большой фанат того что тесты в продукте должны быть с самого начала до того как написана первая строчка кода уже должны быть тест-кейсы прописаны на созвоне с бизнес-аналитиком и проектным менеджером к сожалению у нас это получилось немножечко не так но за год мы от полу хаотичного кабана Когда в любой момент может прилететь задача которую вот надо типа Бросить всё и пилить её перешли всё-таки к скраму И теперь мы работаем Ну по нормальной методологии то есть сначала qa инженеры А про Команду наверное стоило ещё рассказать вообще в нашем ноунейм банке Много народу около дети команд в моей команде три фронта один Лид над фронтами Ну соответственно НР а два ручника Q один автоматизатор Ну и дизайнер продукто оунер и Проектный менеджер коче мы ти автономный который занимается Вот только нашей частью всего приложения",
        "tokens": 222
      },
      {
        "title": "Взаимодействие между командами",
        "text": "Окей было ли такое что прилетали какие-то задачи которые затрагивали несколько команд и вам приходилось как-то взаимодействовать Да конечно иногда есть какие-то интеграции которые должны торчать наружу иногда наш попп открывается из другого места поэтому конечно такой взаимодействие предполагает Ну митинги между командами мы согласуем контракты Ну в целом Ува",
        "tokens": 85
      },
      {
        "title": "Процесс работы с задачами и спринтами",
        "text": "Окей Расскажи ВМ как шла работа задачей как она появлялась и как она попадала в продакшене Да конечно ну тут как бы у нас см и Flow Давай как-то просто среднестатистический спринт я расскажу начинается в общем спринт И в этот момент у нас происходит Груминг задачи в спринт достаются из бэклога в этот бэклог они попадают на квартальном планировании потом Проектный менеджер там утр сает все детали аналитиком а тестировщики разбирают это на написание тест-кейсов мы что-то читаем что-то переспрашивает уже с каким-то списком оформленных целиком задач чтобы не спрашивать типа А что здесь надо сделать ничего не понятно Вот на Груминг оцениваем Если слишком много мы используем рипо Если слишком много то разбиваем декомпозировать поэтому Значит надо её разбивать и получать какие-то вменяемые оценки Всё дальше Лид раскидывает асат задачи мы приступаем к их разработке Как происходит конкретно одна атомарная задача с точки зрения разработчика а ркд дев ветки фичи ветки в ней идёт разработка когда разработка подходит к логично итогу кажется всё готова и минимально протестирована самим разработчиком создаётся Pull request в де в этот момент C CD отправляет э сборочка тестировщику на Сати тестирование То есть он проверяет что это фича в порядке Мы МР Можем всё это дело в develop Ну и так разработчики решаем конфликты там происходит процесс Quad review Ну думаю что Про это можно не рассказывать в компании слава Богу уже есть linter Style Guide то есть мало ругаемся на код Review А в основном всё уже автоматизировано что можно то есть то есть из-за скобочек умеем не спорить вот Ну так происходит работа у всех в какой-то момент некоторые спринты Мы просто не релиз только на стейджинг накатывает Так что мы срезаем на стейдж это отправляется на регресс для тестировщиков А вот в эту ветку сй мы больше ничего не льём Если тестировщики говорят что что-то не так есть дефекты прямо в стейджинг это также через Фиксы Фикси потом происходит Back merch в develop Когда мы выкатили это ну всякие крутые практики нормального релиза У нас тоже есть то есть у нас есть Альфа версии У нас есть фича Оглы У нас есть paral rollout когда мы раскатываем там только на часть пользователей нашу сборочка Вот и смотрим что они ответят какие у нас ещё есть артефакты скрама у нас дейлики Мы стараемся сводить их минимально к Привет Какие есть проблемы Успею ли закончить всё обычно 20 минут с головой хватает на команду У нас есть ретроспектива как раз-таки вот в первый год было очень много баталий по поводу Канбан и его преобразования в скрам наконец-то мы всё это сделали чему Я признаться рад сейчас в основном ну ретроспектива короче спокойно проходит Не суть",
        "tokens": 522
      },
      {
        "title": "Оценка задач на квартальном планировании",
        "text": "Да вроде всё что когда у вас проходит квартальное планирование вы также в стори поинтах оцениваете или какими-то более ещё абстрактными вещами потому что как будто бы там ценить нереально ещё задачу ну на квартальном планировании Мы в основном мыслим категориями эпиков потому что обсуждать там куда мы подвинется цвета конечно же чересчур то есть в эк создаются Эпики они приоритизировать в этом спринте в этот момент Эпик наполняется User Stories так как Эпики трудно оценивать в ри поинтах и очевидно они все больше там 15 больше 100 ри поинтов на Epic скидывается примерное количество дней ну как бы это иногда там происходит с пнг покером Иногда просто Ну наверное это там месяца два займёт Ну наверное да когда мы понимаем что приоритет этого Эпика подошёл и вот сейчас в следующем спринте кажется пора будет им заниматься Epic плотно наполняется расписываются User Stories и декомпозировать и вот их мы уже оцениваем в стори поинтах чтобы ну по графике по аналитике жиры понимать что вот этот спринт мы укомплектовали и он запускается Окей окей тут вообще вопросов нету",
        "tokens": 233
      },
      {
        "title": "Описание масштабной задачи с таблицей",
        "text": "Расскажи тогда о самых крутых задачах которые ты вообще делал на работе за последнее время самая крутая и масштабная задача связана с событиями из-за которых сап компания покинула территорию Российской Федерации и как бы мы использовали под капотом В общем его наш банк но так как теперь это продукт санкционный его использовать нельзя нам пришлось админку перепилить с нуля там масса различных фичей Если надо я конечно про них конкретно расскажу но давай сосредоточимся именно на моих достижений в общем самая масштабная задача была табличка ну не не просто табличка О'кей а то есть идея в том что пользователь может загружать разнообразные данные в разнообразном формате там может быть разное количество полей и ну как бы вот мы закидываем это и табличка должна преобразоваться и подстроиться под эти данные что я имею в виду например А в таблице есть имя фамилия возраст тогда у нас в таблице появляются эти поля и мы можем фильтровать по ним и делать какие-то простейшие сортировочные действия ну к примеру мы можем отфильтровать возраст от и до надеюсь тебе нравится глубина и полнота ответов на вопросы",
        "tokens": 250
      },
      {
        "title": "Продвижение к полной версии видео",
        "text": "спешу обрадовать на самом деле эта часть видео которое выложено на YouTube неполное в полной режиссёрского версии Мы рассмотрели ещё больше технических архитектурных и софтов вопросов и снабдили их подробной тестовой расшифровкой с полными ответами пруфами и ссылками на дополнительные материалы она доступна после подписки на сообщество осознанной меркантильность для всех участников переходи по ссылке в описании после подписки тебе станет доступно Не только это интервью но и многие другие даже записи реальных собеседований в русские и не только бигтех Ну и конечно профильные технические чаты Где тебе помогут с подготовкой поделятся вопросами в конкретную команду короче за подписку ты получишь доступ к целой экосистеме для подготовки к собеседования переходи по ссылке в описании подписывайся на бусте и смотри полное видео со всеми вопросами и подробными ответами ну а мы продолжаем",
        "tokens": 172
      },
      {
        "title": "Технические сложности с таблицей и виртуализацией",
        "text": "хорошо про основной функци фона в целом Понятно Расскажи в чём ещё Техническая сложность была потому что как будто таблица выводится Поля не так как будто рдо так Мы работаем С банковскими данными у них может быть неизвестный большой объём То есть это может быть во-первых много столбцов это может быть много строк то есть кидают там гигабайт най экселевский Файлик и было бы неплохо чтобы он распарсить всю оперативку скролл не будет работать поэтому стояла задача виртуализации таблицы то есть мы рендере ту часть которая тся во вьюпорте пользователя логичный вопрос А что бы просто не взять какую-нибудь библиотеку которая уже всё это порешал за нас Ну к сожалению это всё-таки банковская сфера и устанавливать случайные пакеты не получается Поэтому у нас только самые основные библиотеки используются А вот такие прикладные вещи мы пишем руками Поэтому вот я реализовывался через нативный CSS ну все элементы имеют одинаковую высоту я относительно скролла высчитывали стартовый индекс и финальный индекс элемента рендерит только эту часть в CSS изменяя свойства translate Y так как В тупую менять топ К сожалению бы не получилось потому что ну там есть особенность что топ заставляет рендерится страницу вычисление происходит на CPU А ну это было бы черезчур много Угу",
        "tokens": 255
      },
      {
        "title": "Реализация бесконечного скролла",
        "text": "О'кей про это чуть попозже поговорим хорошо Ты упомянул бесконечный скролл А для чего он был нужен Ну идея в том что мы листаем - таблицу и мы не хотим нажимать на кнопку lad More или там перелистнуть на Следующую страницу хотя это могло бы решить проблемы Но как бы это хуже бы работало с фильтрации да и просто с наглядностью бесконечный скролл Ну подгружает чуть-чуть заранее чтобы пользователь не видел нас наш индикатор ler чтобы ну он видел сразу таблицу до конца",
        "tokens": 126
      },
      {
        "title": "Использование debounce для фильтров",
        "text": "Хорошо ты сказал что в этой странице ещё были фильтры по возрасту по имейлу если я быстро буду их изменять то таблица наверное тоже будет перескакивать очень быстро нет здесь использовал концепцию debounce Ну идея в том что у нас есть много событий и мы не на каждое событие в тупую отправляем запрос а мы ждём пока На некотором интервале э события как бы закончится и Ну например Я очень быстро печатаю И это не значит что я отправляю на каждый запрос на каждую введён ную букву запрос на энд Я жду пока пользователь допечатная лишнее о'кей",
        "tokens": 142
      },
      {
        "title": "Поддержка нескольких способов поставки данных",
        "text": "О'кей круто ещё с этой фич связано что Ну я рассказал Вот про способы поставки туда данных на самом деле их нужно было поддерживать несколько То есть например можно для создания такого отчёта просто указать ссылку на backend endp с необходимыми фильтрами и создать отчёт из неё второй формат мы просто выбираем BD который у нас крутится прописываем SQL запрос и табличка сама достаёт всё нужное из этой БД по этому иль запросу и третье это как раз разбор больших файлов типа гигабайт 2 гиб и подгрузка информации из них здесь сложность состояла в том что естественно браузер по умолчанию не переварит гигабайт файл Вот это так не работает поэтому Был использован таз для",
        "tokens": 170
      }
    ]
  }
}