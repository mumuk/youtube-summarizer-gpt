import express from 'express';
import OpenAI from 'openai';
import { countTokens } from '../../services/tokenCounter.js';
import { saveSummary } from '../../utils/save-summary.js';

const router = express.Router();
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
const MIN_TEXT_TOKEN_LIMIT = 300;

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –¥–ª—è –±–ª–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ.
 * @param {string} text - –¢–µ–∫—Å—Ç –±–ª–æ–∫–∞.
 * @param {string} language - –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫ –¥–ª—è —Å–∞–º–º–∞—Ä–∏.
 * @returns {Promise<string>} - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ –∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç.
 */
async function summarizeBlock(text, language) {
    const systemPrompt = `Respond only with valid JSON {"summary": string}. No markdown, no backticks, no extra text.
Persist: Stay engaged until the task is fully complete.
Tool-first: If you need information‚Äîcall a tool; do not guess.
Plan: First plan thoroughly, then execute functions.

# üéØ Role & Goal
You are a Prompt Engineer that generates a concise summary (2‚Äì3 sentences).

# üé® Language
Summarize the following text in the "${language}" language.

# üìÉ Main Rules
- If the block token count > ${MIN_TEXT_TOKEN_LIMIT}, summarize in 2‚Äì3 sentences.
- Otherwise, return the original text unchanged.

# üì§ Output Format
{"summary": string}

# üìö Block Text
${text}`;

    const response = await openai.chat.completions.create({
        model: 'gpt-4.1-mini',
        temperature: 0.4,
        messages: [{ role: 'system', content: systemPrompt }]
    });

    const raw = response.choices[0].message.content.trim();
    const match = raw.match(/\{"summary":\s*"([\s\S]*)"\}/);
    if (!match) return text;
    try {
        const result = JSON.parse(match[0]);
        return result.summary;
    } catch {
        return text;
    }
}

/**
 * –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –æ–±—ä–µ–∫—Ç –±–ª–æ–∫–∞ (title, summary, text) –Ω–∞ —Ü–µ–ª–µ–≤–æ–π —è–∑—ã–∫.
 * @param {{title: string, summary: string, text: string}} blockObj
 * @param {string} targetLanguage
 * @returns {Promise<{title: string, summary: string, text: string}>}
 */
async function translateBlock(blockObj, targetLanguage) {
    const payload = JSON.stringify(blockObj);
    const systemPrompt = `Respond only with valid JSON in the same structure as input: {"title": string, "summary": string, "text": string}. No extra text.
Persist: Stay engaged until the task is fully complete.
Tool-first: If you need information‚Äîcall a tool; do not guess.
Plan: First plan thoroughly, then execute functions.

# üéØ Role & Goal
You are a Prompt Engineer that translates given JSON values into ${targetLanguage}, preserving keys.

# üì§ Input JSON
${payload}`;

    const response = await openai.chat.completions.create({
        model: 'gpt-4.1-mini',
        temperature: 0.3,
        messages: [{ role: 'system', content: systemPrompt }]
    });

    const raw = response.choices[0].message.content.trim();
    const match = raw.match(/\{[\s\S]*\}/);
    if (!match) return blockObj;
    try {
        return JSON.parse(match[0]);
    } catch {
        return blockObj;
    }
}

router.post('/', async (req, res) => {
    const { blocks, textLanguage, transcriptLanguage } = req.body;

    if (!Array.isArray(blocks)) {
        return res.status(400).json({ error: 'Missing or invalid "blocks" array' });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π —è–∑—ã–∫ –≤—ã–≤–æ–¥–∞
    const targetLanguage = (transcriptLanguage && transcriptLanguage !== textLanguage)
        ? transcriptLanguage
        : textLanguage;

    try {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º summary –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        const results = await Promise.all(
            blocks.map(async (block) => {
                const { title, text, tokens } = block;

                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º summary –Ω–∞ targetLanguage, –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ MIN_TEXT_TOKEN_LIMIT
                const summary = await summarizeBlock(text, targetLanguage);

                let finalTitle = title;
                let finalText = text;
                let finalSummary = summary;

                // –ü–µ—Ä–µ–≤–æ–¥ title –∏ text, –µ—Å–ª–∏ targetLanguage –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ
                if (targetLanguage && targetLanguage !== textLanguage) {
                    const translated = await translateBlock({
                        title: finalTitle,
                        summary: finalSummary,
                        text: finalText
                    }, targetLanguage);
                    finalTitle = translated.title;
                    finalSummary = translated.summary;
                    finalText = translated.text;
                }

                // –ü–æ–¥—Å—á—ë—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≤—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
                const combined = `${finalTitle} ${finalSummary} ${finalText}`;
                const combinedTokens = countTokens(combined);

                return {
                    title: finalTitle,
                    summary: finalSummary,
                    text: finalText,
                    tokens: combinedTokens
                };
            })
        );

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Markdown
        saveSummary(results);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        return res.json({
            textLanguage,
            transcriptLanguage: targetLanguage,
            blocks: results
        });
    } catch (error) {
        console.error('[Summary Route Error]', error);
        return res.status(500).json({ error: 'Failed to generate block summaries' });
    }
});

export default router;
